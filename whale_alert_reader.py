import os
import requests
from datetime import datetime, timedelta

BITQUERY_TOKEN = os.getenv("BITQUERY_TOKEN")
BITQUERY_URL = "https://graphql.bitquery.io/"

HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {BITQUERY_TOKEN}"
}

NETWORKS = [
    {"name": "Ethereum", "type": "transfers", "query_root_field": "ethereum", "network_arg": "eth"},
    {"name": "BSC", "type": "transfers", "query_root_field": "ethereum", "network_arg": "bsc"},
    {"name": "Polygon", "type": "transfers", "query_root_field": "ethereum", "network_arg": "matic"},
    {"name": "Tron", "type": "transfers", "query_root_field": "tron"},
    {"name": "Solana", "type": "transfers", "query_root_field": "solana"},
    {"name": "XRP", "type": "transfers", "query_root_field": "ripple"},
    {"name": "Bitcoin", "type": "outputs", "query_root_field": "bitcoin"}
]

def build_query_for_network(net_config, date_from, date_to):
    root_field = net_config["query_root_field"]
    network_arg_value = net_config.get("network_arg")

    fields_common_transfers = """
        amount
        amountUsd
        currency { symbol }
        sender { address annotation smartContract { contractType } owner }
        receiver { address annotation smartContract { contractType } owner }
        transaction { hash blockTimestamp }
    """

    fields_bitcoin_outputs = """
        value
        address { address annotation owner }
        transaction {
          hash
          blockTimestamp
          inputs(options: {limit:50}) { address {address annotation owner} }
          outputs(options: {limit:50}) { address {address annotation owner} }
        }
    """

    if net_config["type"] == "transfers":
        field_to_query_in_root = "transfers"
        fields_to_select = fields_common_transfers
    elif net_config["type"] == "outputs":
        field_to_query_in_root = "outputs"
        fields_to_select = fields_bitcoin_outputs
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {net_config['type']}")

    # –í API –∑–∞–ø—Ä–æ—Å–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞—Ä–≥—É–º–µ–Ω—Ç date –¥–ª—è transfers/outputs
    query_arguments_for_field = f'date: {{since: "{date_from}", till: "{date_to}"}}'

    if root_field == "ethereum" and network_arg_value:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è network_arg_value, —Ç.–∫. —ç—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤ GraphQL
        query_body = f"""
        {root_field}(network: \"{network_arg_value}\") {{
          {field_to_query_in_root}({query_arguments_for_field}) {{
            {fields_to_select}
          }}
        }}
        """
    else:
        query_body = f"""
        {root_field} {{
          {field_to_query_in_root}({query_arguments_for_field}) {{
            {fields_to_select}
          }}
        }}
        """
    return {"query": f"{{ {query_body} }}"}

def get_display_name(addr_obj):
    if not addr_obj: return "???"
    addr = addr_obj.get("address")
    owner = addr_obj.get("owner")
    annotation = addr_obj.get("annotation")
    if owner: return str(owner)
    if annotation: return str(annotation)
    if addr: return f"{addr[:6]}...{addr[-4:]}"
    return "???"

def get_whale_activity_summary(debug=False):
    today = datetime.utcnow()
    yesterday = today - timedelta(days=1)
    date_from = yesterday.strftime("%Y-%m-%d")
    date_to = today.strftime("%Y-%m-%d")
    results = []

    if not BITQUERY_TOKEN:
        results.append("‚ö†Ô∏è BITQUERY_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∏—Ç–∞–º –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return "\n".join(results)

    processed_tx_hashes = set()

    for net_config in NETWORKS:
        net_name = net_config["name"]
        try:
            query = build_query_for_network(net_config, date_from, date_to)
            
            r = requests.post(BITQUERY_URL, headers=HEADERS, json=query, timeout=60)
            r.raise_for_status()
            data = r.json()

            if "errors" in data:
                error_details = str(data["errors"])
                results.append(f"‚ùå [{net_name}] –û—à–∏–±–∫–∞ API Bitquery: {error_details[:200]}")
                continue

            data_level1 = data.get("data", {})
            chain_data_container = data_level1.get(net_config["query_root_field"])

            if chain_data_container is None:
                results.append(f"‚ÑπÔ∏è [{net_name}] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø–æ–ª—è ('{net_config['query_root_field']}') –≤ –æ—Ç–≤–µ—Ç–µ Bitquery.")
                continue

            raw_list_from_api = []
            if net_config["type"] == "transfers":
                raw_list_from_api = chain_data_container.get("transfers", [])
            elif net_config["type"] == "outputs":
                raw_list_from_api = chain_data_container.get("outputs", [])

            if not raw_list_from_api:
                results.append(f"‚ÑπÔ∏è [{net_name}] API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/–≤—ã—Ö–æ–¥–æ–≤.")
                continue

            # --- –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ---
            locally_filtered_list = []
            if net_config["type"] == "transfers":
                USD_FILTER_THRESHOLD = 500000.0
                for tx_item in raw_list_from_api:
                    amount_usd_str = tx_item.get("amountUsd")
                    if amount_usd_str is not None:
                        try:
                            if float(amount_usd_str) >= USD_FILTER_THRESHOLD:
                                locally_filtered_list.append(tx_item)
                        except (ValueError, TypeError):
                            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                
                # –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                locally_filtered_list.sort(key=lambda x: float(x.get("amountUsd", 0) or 0), reverse=True)

            elif net_config["type"] == "outputs": # Bitcoin
                BTC_FILTER_THRESHOLD = 10.0
                for tx_item in raw_list_from_api:
                    value_btc_str = tx_item.get("value")
                    if value_btc_str is not None:
                        try:
                            if float(value_btc_str) >= BTC_FILTER_THRESHOLD:
                                locally_filtered_list.append(tx_item)
                        except (ValueError, TypeError):
                            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                locally_filtered_list.sort(key=lambda x: float(x.get("value", 0) or 0), reverse=True)
            
            if not locally_filtered_list:
                results.append(f"‚ÑπÔ∏è [{net_name}] –ù–µ—Ç –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ—Å–ª–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏).")
                continue
            
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ç–æ–ø-5 ---
            count = 0
            for tx_item in locally_filtered_list:
                if count >= 5: break
                tx_hash = tx_item.get("transaction", {}).get("hash")
                if tx_hash and tx_hash in processed_tx_hashes: # –ü—Ä–æ–≤–µ—Ä—è–µ–º tx_hash –Ω–∞ None –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                    continue
                if tx_hash: # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö—ç—à –µ—Å—Ç—å
                    processed_tx_hashes.add(tx_hash)
                
                if net_config["type"] == "transfers":
                    currency_obj = tx_item.get("currency")
                    symbol = currency_obj.get("symbol", "???") if currency_obj else "???"
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º amountUsd, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ amount (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    amount_usd_val = tx_item.get("amountUsd")
                    amount_val = tx_item.get("amount")
                    amount_to_display = 0.0
                    display_currency_symbol = symbol

                    if amount_usd_val is not None:
                        try:
                            amount_to_display = float(amount_usd_val)
                            if symbol != "???":
                                display_currency_symbol = f"USD ({symbol})"
                            else:
                                display_currency_symbol = "USD"
                        except (ValueError, TypeError): # –ï—Å–ª–∏ amountUsd –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–±—É–µ–º amount
                            if amount_val is not None:
                                try:
                                    amount_to_display = float(amount_val)
                                except (ValueError, TypeError): pass # amount —Ç–æ–∂–µ –Ω–µ —á–∏—Å–ª–æ
                            
                    elif amount_val is not None: # amountUsd –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º amount
                         try:
                            amount_to_display = float(amount_val)
                         except (ValueError, TypeError): pass

                    sender_obj_raw = tx_item.get("sender")
                    receiver_obj_raw = tx_item.get("receiver")
                    if not sender_obj_raw or not receiver_obj_raw: continue # –ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    
                    sender_display = get_display_name(sender_obj_raw)
                    receiver_display = get_display_name(receiver_obj_raw)
                    
                    direction = "üîÅ" # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ ChatGPT
                    if "exchange" in str(sender_obj_raw.get("annotation", "")).lower():
                        direction = "üí∏ –í—ã–≤–æ–¥"
                    elif "exchange" in str(receiver_obj_raw.get("annotation", "")).lower():
                        direction = "üê≥ –í–≤–æ–¥"
                    results.append(f"{direction} [{net_name}] {amount_to_display:,.0f} {display_currency_symbol}: {sender_display} ‚Üí {receiver_display}")

                elif net_config["type"] == "outputs": # Bitcoin
                    value_btc = 0.0
                    value_btc_str = tx_item.get("value")
                    if value_btc_str is not None:
                        try: value_btc = float(value_btc_str)
                        except (ValueError, TypeError): pass

                    tx_detail_obj = tx_item.get("transaction")
                    output_address_obj = tx_item.get("address")
                    sender_display = "–ù–µ—Å–∫–æ–ª—å–∫–æ –≤—Ö–æ–¥–æ–≤" # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
                    receiver_display = get_display_name(output_address_obj)

                    if tx_detail_obj: # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ inputs
                        inputs = tx_detail_obj.get("inputs", [])
                        if inputs and inputs[0]: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç –∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            first_input_addr_obj = inputs[0].get("address")
                            # –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è sender_display –∫–∞–∫ –≤ –º–æ–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
                            if first_input_addr_obj and output_address_obj and first_input_addr_obj.get("address") != output_address_obj.get("address"):
                                sender_display_candidate = get_display_name(first_input_addr_obj)
                                if sender_display_candidate != receiver_display or receiver_display == "???":
                                     sender_display = sender_display_candidate

                    results.append(f"üí∏ [{net_name}] ~{value_btc:.2f} BTC: {sender_display} ‚Üí {receiver_display} (–•—ç—à: {tx_hash or 'N/A'})")

                count += 1
        
        except requests.exceptions.HTTPError as http_err:
            results.append(f"‚ö†Ô∏è [{net_name}] HTTP –æ—à–∏–±–∫–∞: {http_err.response.status_code} - {http_err.response.text[:100]}")
        except requests.exceptions.Timeout:
            results.append(f"‚ö†Ô∏è [{net_name}] –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitquery.")
        except requests.exceptions.RequestException as req_err:
            results.append(f"‚ö†Ô∏è [{net_name}] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {req_err}")
        except Exception as e:
            msg = f"‚ö†Ô∏è [{net_name}] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            if debug:
                response_text = None
                # r_fb —É–±—Ä–∞–Ω, —Ç.–∫. fallback —É–ø—Ä–æ—â–µ–Ω/—É–¥–∞–ª–µ–Ω –∏–∑ —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                if 'r' in locals() and hasattr(r, 'text'): response_text = r.text
                if response_text: msg += f"\n   –û—Ç–≤–µ—Ç API: {response_text[:300]}"
            results.append(msg)

    if not results:
        return "üêã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä—É–ø–Ω—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."
    return "\n".join(results)