import os
import requests
from datetime import datetime, timedelta

BITQUERY_TOKEN = os.getenv("BITQUERY_TOKEN") # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –≤–∞—à–µ–π —Å—Ä–µ–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Railway)
BITQUERY_URL = "https://graphql.bitquery.io/"

HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {BITQUERY_TOKEN}"
}

NETWORKS = [
    {"name": "Ethereum", "slug": "ethereum", "type": "transfers"},
    {"name": "BSC", "slug": "bsc", "type": "transfers"},
    {"name": "Polygon", "slug": "polygon", "type": "transfers"},
    {"name": "Tron", "slug": "tron", "type": "transfers"},
    {"name": "Solana", "slug": "solana", "type": "transfers", "fallback_amount": 25000},
    {"name": "XRP", "slug": "ripple", "type": "transfers", "fallback_amount": 1000000},
    {"name": "Bitcoin", "slug": "bitcoin", "type": "outputs"}
]

def build_transfer_query(network, date_from, date_to, use_native=False, native_limit=0):
    amount_filter = f"amount: {{gt: {native_limit}}}" if use_native else "amountUsd: {gt: 500000}"
    return {
        "query": f"""
{{
  {network} {{
    transfers(
      date: {{since: "{date_from}", till: "{date_to}"}}
      {amount_filter}
      options: {{limit: 10, desc: "amountUsd"}} # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–µ
    ) {{
      amount
      amountUsd
      currency {{ symbol }}
      sender {{
        address
        annotation
        smartContract {{ contractType }}
        owner
      }}
      receiver {{
        address
        annotation
        smartContract {{ contractType }}
        owner
      }}
      transaction {{ hash blockTimestamp }}
    }}
  }}
}}"""}

def build_btc_query(date_from, date_to):
    return {
        "query": f"""
{{
  bitcoin {{
    outputs(
      date: {{since: "{date_from}", till: "{date_to}"}}
      value: {{gt: 10}} # BTC value
      options: {{limit: 10, desc: "value"}} # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–µ
    ) {{
      value
      address {{ address annotation owner }} # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –≤—ã—Ö–æ–¥–∞ –∏ –µ–≥–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
      transaction {{
        hash
        blockTimestamp
        inputs(options: {{limit:50}}) {{ address {{address annotation owner}} }} # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –≤—Ö–æ–¥–æ–≤
        outputs(options: {{limit:50}}) {{ address {{address annotation owner}} }} # –ò –≤—Å–µ –≤—ã—Ö–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–∞—á–∏
      }}
    }}
  }}
}}"""}

def get_display_name(addr_obj): # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∞–¥—Ä–µ—Å–∞ —Ü–µ–ª–∏–∫–æ–º
    if not addr_obj:
        return "???"
    
    addr = addr_obj.get("address")
    owner = addr_obj.get("owner")
    annotation = addr_obj.get("annotation")

    if owner:
        return str(owner)
    elif annotation:
        return str(annotation)
    elif addr:
        return f"{addr[:6]}...{addr[-4:]}"
    else:
        return "???"

def get_whale_activity_summary(debug=False):
    today = datetime.utcnow()
    yesterday = today - timedelta(days=1)
    date_from = yesterday.strftime("%Y-%m-%d")
    date_to = today.strftime("%Y-%m-%d")

    results = []
    
    if not BITQUERY_TOKEN:
        results.append("‚ö†Ô∏è BITQUERY_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∏—Ç–∞–º –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return "\n".join(results)

    processed_tx_hashes = set() # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö —É–∑–ª–æ–≤ –∑–∞–ø—Ä–æ—Å–∞

    for net in NETWORKS:
        try:
            query = None
            if net["type"] == "transfers":
                query = build_transfer_query(net["slug"], date_from, date_to)
            elif net["type"] == "outputs": # Bitcoin
                query = build_btc_query(date_from, date_to)
            else:
                results.append(f"‚ö†Ô∏è [{net['name']}] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.")
                continue

            r = requests.post(BITQUERY_URL, headers=HEADERS, json=query, timeout=45)
            r.raise_for_status()
            data = r.json()

            if "errors" in data:
                error_details = str(data["errors"])
                results.append(f"‚ùå [{net['name']}] –û—à–∏–±–∫–∞ API Bitquery: {error_details[:200]}") # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                continue

            chain_data_key = net["slug"] if net["type"] != "outputs" else "bitcoin"
            chain_data = data.get("data", {}).get(chain_data_key)

            if chain_data is None: # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                results.append(f"‚ÑπÔ∏è [{net['name']}] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ('{chain_data_key}') –≤ –æ—Ç–≤–µ—Ç–µ Bitquery.")
                continue

            if net["type"] == "transfers":
                transfers = chain_data.get("transfers", [])
                
                if not transfers and "fallback_amount" in net: # –õ–æ–≥–∏–∫–∞ Fallback
                    query_fb = build_transfer_query(
                        net["slug"], date_from, date_to,
                        use_native=True,
                        native_limit=net["fallback_amount"]
                    )
                    r_fb = requests.post(BITQUERY_URL, headers=HEADERS, json=query_fb, timeout=45)
                    r_fb.raise_for_status() # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                    data_fb = r_fb.json()
                    if "errors" in data_fb:
                        error_details_fb = str(data_fb["errors"])
                        results.append(f"‚ùå [{net['name']}-Fallback] –û—à–∏–±–∫–∞ API Bitquery: {error_details_fb[:200]}")
                        continue
                    
                    chain_data_fb = data_fb.get("data", {}).get(net["slug"])
                    if chain_data_fb is None: # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                        results.append(f"‚ÑπÔ∏è [{net['name']}] Fallback —Ç–æ–∂–µ –Ω–µ –¥–∞–ª –¥–∞–Ω–Ω—ã—Ö.")
                        continue
                    transfers = chain_data_fb.get("transfers", [])

                if not transfers:
                    results.append(f"‚ÑπÔ∏è [{net['name']}] –ù–µ—Ç –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.")
                    continue
                
                count = 0
                for tx in transfers:
                    if count >= 5: break

                    tx_hash = tx.get("transaction", {}).get("hash")
                    if tx_hash and tx_hash in processed_tx_hashes:
                        continue
                    
                    currency_obj = tx.get("currency")
                    if not currency_obj:
                        results.append(f"‚ö†Ô∏è [{net['name']}] –ü—Ä–æ–ø—É—Å–∫ TX: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–µ. –•—ç—à: {tx_hash or 'N/A'}")
                        continue
                    symbol = currency_obj.get("symbol", "???")

                    amount_val = tx.get("amount")
                    try:
                        amount_float = float(amount_val) if amount_val is not None else 0.0
                    except (ValueError, TypeError):
                        results.append(f"‚ö†Ô∏è [{net['name']}] –ü—Ä–æ–ø—É—Å–∫ TX: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã '{amount_val}'. –•—ç—à: {tx_hash or 'N/A'}")
                        continue
                    
                    if amount_float == 0.0 and not tx.get("amountUsd"): # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω—É–ª–µ–≤—ã–µ —Å—É–º–º—ã, –µ—Å–ª–∏ –Ω–µ—Ç USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞
                        continue

                    sender_obj_raw = tx.get("sender") # tx.sender –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∞–¥—Ä–µ—Å–∞
                    receiver_obj_raw = tx.get("receiver") # tx.receiver –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∞–¥—Ä–µ—Å–∞

                    if not sender_obj_raw or not receiver_obj_raw:
                        results.append(f"‚ö†Ô∏è [{net['name']}] –ü—Ä–æ–ø—É—Å–∫ TX: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ/–ø–æ–ª—É—á–∞—Ç–µ–ª–µ. –•—ç—à: {tx_hash or 'N/A'}")
                        continue
                    
                    sender_display = get_display_name(sender_obj_raw)
                    receiver_display = get_display_name(receiver_obj_raw)
                    
                    direction = "üîÅ" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ owner –∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
                    if sender_obj_raw.get("owner") or ("exchange" in str(sender_obj_raw.get("annotation","")).lower()):
                        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –∏–∑–≤–µ—Å—Ç–Ω—ã–π "owner" (–±–∏—Ä–∂–∞), —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–≤–æ–¥ —Å –±–∏—Ä–∂–∏
                         if not (receiver_obj_raw.get("owner") or ("exchange" in str(receiver_obj_raw.get("annotation","")).lower())):
                            direction = "üí∏ –í—ã–≤–æ–¥" 
                    elif receiver_obj_raw.get("owner") or ("exchange" in str(receiver_obj_raw.get("annotation","")).lower()):
                        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å - –∏–∑–≤–µ—Å—Ç–Ω—ã–π "owner" (–±–∏—Ä–∂–∞), —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–≤–æ–¥ –Ω–∞ –±–∏—Ä–∂—É
                        if not (sender_obj_raw.get("owner") or ("exchange" in str(sender_obj_raw.get("annotation","")).lower())):
                            direction = "üê≥ –í–≤–æ–¥"

                    results.append(f"{direction} [{net['name']}] {amount_float:,.0f} {symbol}: {sender_display} ‚Üí {receiver_display}")
                    if tx_hash: processed_tx_hashes.add(tx_hash)
                    count += 1

            elif net["type"] == "outputs": # Bitcoin
                outputs_list = chain_data.get("outputs", [])
                if not outputs_list:
                    results.append(f"‚ÑπÔ∏è [Bitcoin] –ù–µ—Ç –∫—Ä—É–ø–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤ (outputs).")
                    continue
                
                count = 0
                for btc_out in outputs_list:
                    if count >= 5: break
                    
                    tx_hash = btc_out.get("transaction", {}).get("hash")
                    if tx_hash and tx_hash in processed_tx_hashes:
                        continue

                    value_btc_str = btc_out.get("value")
                    try:
                        value_btc = float(value_btc_str) if value_btc_str is not None else 0.0
                    except (ValueError, TypeError):
                        results.append(f"‚ö†Ô∏è [Bitcoin] –ü—Ä–æ–ø—É—Å–∫ Output: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç value '{value_btc_str}'. –•—ç—à: {tx_hash or 'N/A'}")
                        continue
                    if value_btc == 0.0: continue

                    # –î–ª—è Bitcoin –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–ª–æ–∂–Ω–µ–µ –∏–∑-–∑–∞ UTXO
                    # –ú—ã –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –≤—ã—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞.
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "—Ä–µ–∞–ª—å–Ω–æ–≥–æ" –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥–æ–≤.
                    
                    tx_detail_obj = btc_out.get("transaction")
                    output_address_obj = btc_out.get("address") # –ê–¥—Ä–µ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞

                    sender_display = "–ù–µ—Å–∫–æ–ª—å–∫–æ –≤—Ö–æ–¥–æ–≤" # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Bitcoin
                    receiver_display = get_display_name(output_address_obj)

                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è" –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Ö–æ–¥—É, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    # –≠—Ç–æ –æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ!
                    if tx_detail_obj:
                        inputs = tx_detail_obj.get("inputs", [])
                        if inputs:
                            first_input_addr_obj = inputs[0].get("address")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –∞–¥—Ä–µ—Å–æ–º —Å–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                            if first_input_addr_obj and output_address_obj and first_input_addr_obj.get("address") != output_address_obj.get("address"):
                                sender_display_candidate = get_display_name(first_input_addr_obj)
                                # –ò–∑–±–µ–≥–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å" –∏ "–ø–æ–ª—É—á–∞—Ç–µ–ª—å" - —ç—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –Ω–µ ???
                                if sender_display_candidate != receiver_display or receiver_display == "???":
                                     sender_display = sender_display_candidate


                    # –î–ª—è Bitcoin —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "üí∏ –ü–µ—Ä–µ–≤–æ–¥" –≤–º–µ—Å—Ç–æ "–í—ã–≤–æ–¥", —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ UTXO
                    results.append(f"üí∏ [Bitcoin] ~{value_btc:.2f} BTC: {sender_display} ‚Üí {receiver_display} (–•—ç—à: {tx_hash or 'N/A'})")
                    if tx_hash: processed_tx_hashes.add(tx_hash)
                    count +=1

        except requests.exceptions.HTTPError as http_err:
            results.append(f"‚ö†Ô∏è [{net['name']}] HTTP –æ—à–∏–±–∫–∞: {http_err.response.status_code} - {http_err.response.text[:100]}")
        except requests.exceptions.Timeout:
            results.append(f"‚ö†Ô∏è [{net['name']}] –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitquery.")
        except requests.exceptions.RequestException as req_err:
            results.append(f"‚ö†Ô∏è [{net['name']}] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {req_err}")
        except Exception as e:
            msg = f"‚ö†Ô∏è [{net['name']}] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            if debug and 'r' in locals() and hasattr(r, 'text'): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 'r' –∏ 'text'
                msg += f"\n   –û—Ç–≤–µ—Ç API: {r.text[:300]}" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–µ–±–∞–≥–∞
            elif debug and 'r_fb' in locals() and hasattr(r_fb, 'text'):
                 msg += f"\n   –û—Ç–≤–µ—Ç API (fallback): {r_fb.text[:300]}"
            results.append(msg)

    if not results:
        return "üêã –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞."

    return "\n".join(results)