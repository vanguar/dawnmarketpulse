# macro_reader.py
import os
import requests
import datetime as dt

FRED_KEY = os.getenv("FRED_KEY")
BASE = "https://api.stlouisfed.org/fred/series/observations"

# —Ä—É—Å—Å–∫–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
MONTHS_RU = {
    1: "—è–Ω–≤", 2: "—Ñ–µ–≤", 3: "–º–∞—Ä", 4: "–∞–ø—Ä", 5: "–º–∞–π", 6: "–∏—é–Ω",
    7: "–∏—é–ª", 8: "–∞–≤–≥", 9: "—Å–µ–Ω", 10: "–æ–∫—Ç", 11: "–Ω–æ—è", 12: "–¥–µ–∫"
}

# Series-ID –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
SERIES = {
    "US": {
        "flag":  "üá∫üá∏",
        "cpi":   "CPALTT01USM657N",      # CPI YoY %
        "ppi":   "PPIACO",               # PPI index ‚Äî –ø–æ—Å—á–∏—Ç–∞–µ–º YoY
        "rate":  "FEDFUNDS",             # —Å—Ç–∞–≤–∫–∞ –§–†–° %
        "unemp": "UNRATE",
    },
    "EU": {
        "flag":  "üá™üá∫",
        "cpi":   "CPALTT01EZM657N",
        "ppi":   "PRINTO01EZM661S",      # PPI index (–ï–°)
        "rate":  "ECBDFR",               # —Å—Ç–∞–≤–∫–∞ –ï–¶–ë %
        "unemp": "LRHUTTTTEZM156S",
    },
    "JP": {
        "flag":  "üáØüáµ",
        "cpi":   "CPALTT01JPM657N",
        "ppi":   "WPIDEC1JPM661N",       # PPI index (–Ø–ø–æ–Ω–∏—è)
        "rate":  "IRSTCB01JPM156N",      # —Å—Ç–∞–≤–∫–∞ BoJ %
        "unemp": None,                   # –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    },
}

MAX_AGE_DAYS = 400    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ 13 –º–µ—Å—è—Ü–µ–≤


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _fetch(series_id: str, limit: int = 1):
    url = (
        f"{BASE}?series_id={series_id}&api_key={FRED_KEY}"
        f"&file_type=json&sort_order=desc&limit={limit}"
    )
    return requests.get(url, timeout=10).json()["observations"]


def _latest(series_id: str):
    """–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (value, date_iso) –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞; —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ"""
    obs = _fetch(series_id, 1)[0]
    date_iso = obs["date"]
    if (dt.datetime.today() - dt.datetime.fromisoformat(date_iso)).days > MAX_AGE_DAYS:
        raise ValueError("data too old")
    return float(obs["value"]), date_iso


def _ppi_yoy(series_id: str):
    """–≤—ã—á–∏—Å–ª—è–µ—Ç –≥–æ–¥-–∫-–≥–æ–¥—É (%), –±–µ—Ä—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –∏ –ø—É–Ω–∫—Ç –≥–æ–¥ –Ω–∞–∑–∞–¥"""
    obs = _fetch(series_id, 13)               # –±–µ—Ä—ë–º 13 –º–µ—Å—è—Ü–µ–≤, —á—Ç–æ–±—ã —Ö–≤–∞—Ç–∏–ª–æ
    latest, prev_year = float(obs[0]["value"]), float(obs[-1]["value"])
    date_iso = obs[0]["date"]
    if any(v in ("", ".") for v in (latest, prev_year)):
        raise ValueError("missing PPI data")
    yoy = (latest / prev_year - 1) * 100
    return yoy, date_iso


def _rus_date(date_iso: str) -> str:
    d = dt.datetime.fromisoformat(date_iso)
    return f"{MONTHS_RU[d.month]} {d.year}"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ public ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_macro_block() -> str:
    lines = []

    for data in SERIES.values():
        flag = data["flag"]

        # CPI
        try:
            cpi, date_cpi = _latest(data["cpi"])
        except Exception:
            continue  # –±–µ–∑ CPI —Å—Ç—Ä–∞–Ω—É –Ω–µ –≤—ã–≤–æ–¥–∏–º

        # PPI YoY
        try:
            ppi, _ = _ppi_yoy(data["ppi"])
            ppi_part = f"PPI {ppi:.1f} %"
        except Exception:
            ppi_part = "PPI n/a"

        # Rate
        try:
            rate, _ = _latest(data["rate"])
            rate_part = f"Rate {rate:.2f} %"
        except Exception:
            rate_part = "Rate n/a"

        # Unemployment (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        unemp_part = ""
        if data["unemp"]:
            try:
                unemp, _ = _latest(data["unemp"])
                unemp_part = f" | Unemp {unemp:.1f} %"
            except Exception:
                pass

        lines.append(
            f"{flag} CPI {cpi:.1f} % | {ppi_part} | {rate_part}{unemp_part}  "
            f"({_rus_date(date_cpi)})"
        )

    return (
        "üìä –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞ (CPI ‚Äî –∏–Ω—Ñ–ª—è—Ü–∏—è –≥/–≥, PPI ‚Äî —Ü–µ–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥/–≥, "
        "Rate ‚Äî —Å—Ç–∞–≤–∫–∞ –¶–ë, Unemp ‚Äî –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞)\n"
        + "\n".join(lines)
    ) if lines else ""
