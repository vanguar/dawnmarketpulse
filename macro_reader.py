# macro_reader.py
import os
import requests
import datetime as dt
from custom_logger import log               # —Ç–≤–æ–π —à—Ç–∞—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä

FRED_KEY = os.getenv("FRED_KEY")
BASE = "https://api.stlouisfed.org/fred/series/observations"

# ‚Äî‚Äî‚Äî —Ä—É—Å—Å–∫–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
MONTHS_RU = {
    1: "—è–Ω–≤", 2: "—Ñ–µ–≤", 3: "–º–∞—Ä", 4: "–∞–ø—Ä", 5: "–º–∞–π", 6: "–∏—é–Ω",
    7: "–∏—é–ª", 8: "–∞–≤–≥", 9: "—Å–µ–Ω", 10: "–æ–∫—Ç", 11: "–Ω–æ—è", 12: "–¥–µ–∫"
}

# ‚Äî‚Äî‚Äî Series-ID
SERIES = {
    "US": {
        "flag":  "üá∫üá∏",
        "cpi":   "CPALTT01USM657N",      # CPI YoY %
        "ppi":   "PPIACO",               # PPI index ‚Äí –ø–æ—Å—á–∏—Ç–∞–µ–º YoY
        "rate":  "FEDFUNDS",             # —Å—Ç–∞–≤–∫–∞ –§–†–° %
        "unemp": "UNRATE",
    },
    "EU": {
        "flag":  "üá™üá∫",
        "cpi":   "CPALTT01EZM657N",
        "ppi":   "PRINTO01EZM661S",      # PPI index (–ï–°)
        "rate":  "ECBDFR",               # —Å—Ç–∞–≤–∫–∞ –ï–¶–ë %
        "unemp": "LRHUTTTTEZM156S",
    },
    "JP": {
        "flag":  "üáØüáµ",
        "cpi":   "CPALTT01JPM657N",
        "ppi":   "WPIDEC1JPM661N",       # PPI index (–Ø–ø–æ–Ω–∏—è)
        "rate":  "IRSTCB01JPM156N",      # —Å—Ç–∞–≤–∫–∞ BoJ %
        "unemp": None,
    },
}

MAX_AGE_DAYS = 800       # –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∞–≥ ~26 –º–µ—Å

# ‚Äî‚Äî‚Äî helpers --------------------------------------------------------------
def _fetch(series_id: str, rows: int = 13):
    url = (
        f"{BASE}?series_id={series_id}&api_key={FRED_KEY}"
        f"&file_type=json&sort_order=desc&limit={rows}"
    )
    data = requests.get(url, timeout=10).json()
    if "observations" not in data:
        err = data.get("error_message", data)
        raise ValueError(f"FRED error: {err}")
    return data["observations"]


def _to_float(val: str) -> float:
    if val in ("", "."):
        raise ValueError("missing value")
    return float(val)


def _latest(series_id: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (value, date_iso) ‚Äî –±–µ—Ä—ë—Ç –±–ª–∏–∂–∞–π—à–µ–µ –Ω–µ–Ω—É–ª–µ–≤–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ,
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–≤–Ω–æ—Å—Ç—å.
    """
    for obs in _fetch(series_id):
        try:
            value = _to_float(obs["value"])
            date_iso = obs["date"]
            break
        except ValueError:
            continue
    else:
        raise ValueError("all recent values empty")

    if (dt.datetime.today() - dt.datetime.fromisoformat(date_iso)).days > MAX_AGE_DAYS:
        raise ValueError("data too old")
    return value, date_iso


def _ppi_yoy(series_id: str):
    """PPI YoY (%) ‚Äî (–ø–æ—Å–ª–µ–¥–Ω–µ–µ / –≥–æ–¥_–Ω–∞–∑–∞–¥ ‚àí 1) √ó 100"""
    obs = _fetch(series_id, 13)
    latest = _to_float(obs[0]["value"])
    year_ago = _to_float(obs[-1]["value"])
    yoy = (latest / year_ago - 1) * 100
    return yoy, obs[0]["date"]


def _rus_date(iso: str) -> str:
    d = dt.datetime.fromisoformat(iso)
    return f"{MONTHS_RU[d.month]} {d.year}"

# ‚Äî‚Äî‚Äî safe-wrappers –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∞ -----------------------------------
def safe_latest(label: str, sid: str):
    try:
        val, d = _latest(sid)
        log(f"‚úÖ {label}: {val}  ({d})")
        return val, d
    except Exception as e:
        log(f"‚ùå {label} ERROR: {e}")
        raise


def safe_ppi(label: str, sid: str):
    try:
        val, d = _ppi_yoy(sid)
        log(f"‚úÖ {label}: {val:.2f}%  ({d})")
        return val, d
    except Exception as e:
        log(f"‚ùå {label} ERROR: {e}")
        raise

# ‚Äî‚Äî‚Äî main -----------------------------------------------------------------
def get_macro_block() -> str:
    lines = []

    for country, data in SERIES.items():
        flag = data["flag"]

        # CPI ‚Äî –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        try:
            cpi, date_cpi = safe_latest(f"CPI {flag}", data["cpi"])
        except Exception:
            continue

        # PPI YoY
        try:
            ppi, _ = safe_ppi(f"PPI {flag}", data["ppi"])
            ppi_part = f"PPI {ppi:.1f} %"
        except Exception:
            ppi_part = "PPI n/a"

        # Rate
        try:
            rate, _ = safe_latest(f"RATE {flag}", data["rate"])
            rate_part = f"Rate {rate:.2f} %"
        except Exception:
            rate_part = "Rate n/a"

        # Unemp
        unemp_part = ""
        if data["unemp"]:
            try:
                unemp, _ = safe_latest(f"UNEMP {flag}", data["unemp"])
                unemp_part = f" | Unemp {unemp:.1f} %"
            except Exception:
                pass

        lines.append(
            f"{flag} CPI {cpi:.1f} % | {ppi_part} | {rate_part}{unemp_part}  "
            f"({_rus_date(date_cpi)})"
        )

    return (
        "üìä –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞ (CPI ‚Äî –∏–Ω—Ñ–ª—è—Ü–∏—è –≥/–≥, PPI ‚Äî —Ü–µ–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥/–≥, "
        "Rate ‚Äî —Å—Ç–∞–≤–∫–∞ –¶–ë, Unemp ‚Äî –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞)\n" + "\n".join(lines)
    ) if lines else ""
