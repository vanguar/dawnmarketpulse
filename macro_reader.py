# macro_reader.py
import os, requests, datetime as dt

FRED_KEY = os.getenv("FRED_KEY")
BASE = "https://api.stlouisfed.org/fred/series/observations"

MONTHS_RU = {
    1:"—è–Ω–≤",2:"—Ñ–µ–≤",3:"–º–∞—Ä",4:"–∞–ø—Ä",5:"–º–∞–π",6:"–∏—é–Ω",
    7:"–∏—é–ª",8:"–∞–≤–≥",9:"—Å–µ–Ω",10:"–æ–∫—Ç",11:"–Ω–æ—è",12:"–¥–µ–∫"
}

SERIES = {
    "US": {"flag":"üá∫üá∏", "cpi":"CPALTT01USM657N",  "unemp":"UNRATE"},
    "EU": {"flag":"üá™üá∫", "cpi":"CPALTT01EZM657N",  "unemp":"LRHUTTTTEZM156S"},
    "JP": {"flag":"üáØüáµ", "cpi":"CPALTT01JPM657N",  "unemp":None},
}

MAX_AGE_DAYS = 400

def _latest(sid:str):
    url=(f"{BASE}?series_id={sid}&api_key={FRED_KEY}"
         "&file_type=json&sort_order=desc&limit=1")
    obs=requests.get(url,timeout=10).json()["observations"][0]
    date_iso=obs["date"]
    if (dt.datetime.today()-dt.datetime.fromisoformat(date_iso)
        ).days>MAX_AGE_DAYS:
        raise ValueError("data too old")
    return float(obs["value"]),date_iso

def _rus_date(iso:str)->str:
    d=dt.datetime.fromisoformat(iso)
    return f"{MONTHS_RU[d.month]} {d.year}"

def get_macro_block()->str:
    lines=[]
    for data in SERIES.values():
        flag=data["flag"]
        try:
            cpi,val_date=_latest(data["cpi"])
        except Exception:
            continue  # –±–µ–∑ CPI —Å—Ç—Ä–∞–Ω—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        cpi_part=f"CPI {cpi:.1f} %"

        unemp_part=""
        if data["unemp"]:
            try:
                unemp,_=_latest(data["unemp"])
                unemp_part=f" | Unemp {unemp:.1f} %"
            except Exception:
                pass

        lines.append(f"{flag} {cpi_part}{unemp_part}  ({_rus_date(val_date)})")

    return (
        "üìä –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞ (CPI ‚Äî –∏–Ω—Ñ–ª—è—Ü–∏—è –≥/–≥, Unemp ‚Äî –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞)\n"
        + "\n".join(lines)
    ) if lines else ""
