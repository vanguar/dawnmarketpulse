import os
import requests
from datetime import date, datetime, timedelta # datetime, timedelta –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å, –µ—Å–ª–∏ yf –∏—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç
import yfinance as yf

ALPHA_KEY = os.getenv("ALPHA_KEY") # –î–ª—è get_market_data_text()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è get_crypto_data
COINGECKO_API_BASE_URL = "https://api.coingecko.com/api/v3"
COINGECKO_HEADERS = {
    'User-Agent': 'DawnMarketPulseBot/1.0 (+https://t.me/DawnMarketPulse)'
}
STABLECOINS_TO_SKIP_ANALYSIS = ["USDT", "USDC"] # –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ

def format_large_number(num):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Ç—ã—Å—è—á."""
    if num is None:
        return "N/A"
    try:
        return f"${int(num):,}".replace(",", " ")
    except (ValueError, TypeError):
        return "N/A"

def get_global_crypto_market_data_text():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ –∏ –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á.
    """
    try:
        url = f"{COINGECKO_API_BASE_URL}/global"
        r = requests.get(url, timeout=10, headers=COINGECKO_HEADERS)
        r.raise_for_status()
        global_data = r.json().get("data", {})

        total_market_cap = global_data.get("total_market_cap", {}).get("usd", 0)
        market_cap_change_24h = global_data.get("market_cap_change_percentage_24h_usd", 0)

        total_market_cap_formatted = format_large_number(total_market_cap)
        
        change_emoji = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        if market_cap_change_24h is not None:
            if market_cap_change_24h > 0:
                change_emoji = "üü¢ " # –ü—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–¥–µ–ª–µ–Ω–∏—è –æ—Ç —á–∏—Å–ª–∞
            elif market_cap_change_24h < 0:
                change_emoji = "üî¥ " # –ü—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏
            # –ï—Å–ª–∏ 0, —Ç–æ change_emoji –æ—Å—Ç–∞–Ω–µ—Ç—Å—è "", –∏ –Ω–µ –±—É–¥–µ—Ç –ª–∏—à–Ω–µ–≥–æ –ø—Ä–æ–±–µ–ª–∞
            elif market_cap_change_24h == 0: # —è–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–ª—å
                change_emoji = "‚ö™ " # –∏–ª–∏ –¥—Ä—É–≥–æ–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ ""    
                
        #change_formatted = f"{change_emoji}{market_cap_change_24h:+.2f}%" if market_cap_change_24h is not None else "N/A"

        return (f"üåç –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞: {total_market_cap_formatted}\n"
        f"   {change_emoji}–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á (–≥–ª–æ–±–∞–ª—å–Ω–æ): {market_cap_change_24h:+.2f}%")
    except requests.exceptions.RequestException as e:
        # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö CoinGecko: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return "üåç –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—â–µ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞."
    except Exception as e:
        # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö CoinGecko: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return "üåç –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—â–µ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏."


def get_crypto_data(extended=False):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º —Å CoinGecko API,
    –≤–∫–ª—é—á–∞—è –∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã) –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ BTC —Å 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π.
    –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—â–µ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞.
    """
    final_crypto_block_parts = []

    # 1. –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä—ã–Ω–∫—É
    global_market_text = get_global_crypto_market_data_text()
    if global_market_text:
        final_crypto_block_parts.append(global_market_text)

    # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
    try:
        today_date_str = date.today().strftime("%d.%m.%Y")
        coins_url = (
            f"{COINGECKO_API_BASE_URL}/coins/markets"
            "?vs_currency=usd"
            "&order=market_cap_desc"
            "&per_page=10"
            "&page=1"
            "&sparkline=false"
            "&price_change_percentage=24h"
        )

        r_coins = requests.get(coins_url, timeout=15, headers=COINGECKO_HEADERS)
        r_coins.raise_for_status()
        coins_data = r_coins.json()

        top_coins_lines = [f"\n‚Çø –ö—Ä–∏–ø—Ç–∞ –Ω–∞ {today_date_str} (–¢–æ–ø-10 –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏)"]
        insights = []

        if not coins_data:
            top_coins_lines.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –æ—Ç CoinGecko.")
        else:
            for coin_data in coins_data:
                symbol = coin_data.get("symbol", "N/A").upper()
                name = coin_data.get("name", "Unknown Coin")
                price = coin_data.get("current_price")
                change_24h = coin_data.get("price_change_percentage_24h")
                market_cap = coin_data.get("market_cap")

                if price is None or change_24h is None:
                    top_coins_lines.append(f"  {symbol}: ‚ùå –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({name})")
                    continue

                emoji = "üìà" if (change_24h or 0) > 0 else "üìâ" if (change_24h or 0) < 0 else "üìä"

                if 0 < price < 1.0: price_format = f"${price:,.4f}"
                elif price == 0: price_format = "$0.0000"
                else: price_format = f"${price:,.2f}"
                
                market_cap_formatted = f"(–∫–∞–ø: {format_large_number(market_cap)})" if market_cap else ""
                
                change_color_emoji = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                if change_24h is not None: 
                    if change_24h > 0:
                        change_color_emoji = "üü¢" # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞, —Ç.–∫. –±—É–¥–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö
                    elif change_24h < 0:
                        change_color_emoji = "üî¥" # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞
                    elif change_24h == 0: # —è–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–ª—å
                        change_color_emoji = "‚ö™ " # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "" –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —ç–º–æ–¥–∑–∏
                # –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π emoji (üìà/üìâ/üìä) –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏, 
                # —Ç–∞–∫ –∫–∞–∫ üü¢/üî¥ —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –Ω–∞—á–∞–ª–µ.         

                top_coins_lines.append(f"  {change_color_emoji}<b>{symbol}</b>: {price_format} ({change_24h:+.2f}%) {market_cap_formatted}")

                if extended and symbol not in STABLECOINS_TO_SKIP_ANALYSIS:
                    if abs(change_24h) >= 7:
                        direction = "—Ä–∞—Å—Ç—ë—Ç" if change_24h > 0 else "–ø–∞–¥–∞–µ—Ç"
                        insights.append(f"‚Äî {symbol} ({name}) {direction} –±–æ–ª–µ–µ —á–µ–º –Ω–∞ {abs(change_24h):.1f}%. –í–æ–∑–º–æ–∂–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å.")
                    elif 0 < abs(change_24h) < 1 and change_24h != 0: 
                        insights.append(f"‚Äî {symbol} ({name}) –ø–æ—á—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ({change_24h:+.2f}%). –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è.")

        if extended and insights:
            top_coins_lines.append("\n‚Üí –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º (–∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã):")
            top_coins_lines.extend(insights)
        elif extended and not insights: 
            top_coins_lines.append("\n‚Üí –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º (–∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã):")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É:
            top_coins_lines.append("‚Äî –°—Ä–µ–¥–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–∫—Ä–æ–º–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤) –∑–Ω–∞—á–∏–º—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.")


        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ BTC —Å 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π (—ç—Ç–∞ —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è)
        try:
            btc_ticker_yf = yf.Ticker("BTC-USD")
            btc_hist = btc_ticker_yf.history(period="8d") 

            if not btc_hist.empty and len(btc_hist) >= 2: 
                current_price_btc = btc_hist['Close'].iloc[-1]

                if len(btc_hist) >= 8: 
                    sma7_btc = btc_hist['Close'].iloc[-8:-1].mean()
                    btc_sma_info_line = f"\nüí° BTC ({format_large_number(current_price_btc).replace('$', '')}) " 

                    if current_price_btc > sma7_btc:
                        btc_sma_info_line += f"–≤—ã—à–µ —Å–≤–æ–µ–π 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π ({format_large_number(sma7_btc).replace('$', '')})."
                    elif current_price_btc < sma7_btc:
                        btc_sma_info_line += f"–Ω–∏–∂–µ —Å–≤–æ–µ–π 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π ({format_large_number(sma7_btc).replace('$', '')})."
                    else:
                        btc_sma_info_line += f"–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–≤–æ–µ–π 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π ({format_large_number(sma7_btc).replace('$', '')})."
                    top_coins_lines.append(btc_sma_info_line)
                else:
                    top_coins_lines.append(f"\nüí° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ 7-–¥–Ω–µ–≤–Ω–æ–π SMA –¥–ª—è BTC (–¥–æ—Å—Ç—É–ø–Ω–æ {len(btc_hist)-1} –ø—Ä–µ–¥. –¥–Ω.).")
            else:
                top_coins_lines.append("\nüí° –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTC (yfinance) –¥–ª—è SMA.")
        except Exception as e_sma:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ SMA –¥–ª—è BTC: {e_sma}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            top_coins_lines.append("üí° –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å 7-–¥–Ω–µ–≤–Ω—É—é —Å—Ä–µ–¥–Ω—é—é –¥–ª—è BTC.")

        final_crypto_block_parts.extend(top_coins_lines)
        return "\n".join(part for part in final_crypto_block_parts if part)

    except requests.exceptions.HTTPError as http_err:
        error_message = f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º CoinGecko: {http_err}"
        final_crypto_block_parts.append(f"\n‚ùå {error_message}")
        return "\n".join(part for part in final_crypto_block_parts if part)
    except requests.exceptions.Timeout:
        error_message = "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –æ—Ç CoinGecko."
        final_crypto_block_parts.append(f"\n‚ùå {error_message}")
        return "\n".join(part for part in final_crypto_block_parts if part)
    except requests.exceptions.RequestException as req_err:
        error_message = f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º CoinGecko: {req_err}"
        final_crypto_block_parts.append(f"\n‚ùå {error_message}")
        return "\n".join(part for part in final_crypto_block_parts if part)
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º: {e}"
        final_crypto_block_parts.append(f"\n‚ùå {error_message}")
        return "\n".join(part for part in final_crypto_block_parts if part)


def get_market_data_text():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–æ–Ω–¥–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–∞–º (ETF —á–µ—Ä–µ–∑ Alpha Vantage, "—á–∏—Å—Ç—ã–µ" –∏–Ω–¥–µ–∫—Å—ã —á–µ—Ä–µ–∑ yfinance).
    """
    result_parts = ["üìä –ò–Ω–¥–µ–∫—Å—ã –∏ ETF"]

    # --- ETF —á–µ—Ä–µ–∑ Alpha Vantage ---
    etf_tickers = {
        "S&P 500 ETF (SPY)": "SPY",
        "NASDAQ 100 ETF (QQQ)": "QQQ",
    }
    etf_info_list = []
    if ALPHA_KEY:
        for name, symbol in etf_tickers.items():
            try:
                url = f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey={ALPHA_KEY}"
                r = requests.get(url, timeout=10)
                r.raise_for_status()
                data = r.json()
                quote = data.get("Global Quote")
                if not quote or "05. price" not in quote or "10. change percent" not in quote:
                    etf_info_list.append(f"  {name}: ‚ùå –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (AlphaVantage)")
                    continue

                price_str = quote["05. price"]
                change_percent_str = quote["10. change percent"].rstrip('%')

                price = float(price_str)
                change_percent = float(change_percent_str)

                etf_change_emoji = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                if change_percent > 0:
                    etf_change_emoji = "üü¢" # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞, —Ç.–∫. –≤ —Å–∫–æ–±–∫–∞—Ö
                elif change_percent < 0:
                    etf_change_emoji = "üî¥" # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞
                elif change_percent == 0: # —è–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–ª—å
                    etf_change_emoji = "‚ö™ " # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ ""    
                
                etf_info_list.append(f"  {etf_change_emoji}{name}: ${price:,.2f} ({change_percent:+.2f}%)")
            except Exception as e:
                etf_info_list.append(f"  {name}: ‚ùå –æ—à–∏–±–∫–∞ ({e})")
        if etf_info_list:
            result_parts.extend(etf_info_list)
            result_parts.append("    ‚îî‚îÄ *ETF (Exchange Traded Fund) ‚Äî —ç—Ç–æ —Ñ–æ–Ω–¥, –∞–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–æ—Ä–≥—É—é—Ç—Å—è –Ω–∞ –±–∏—Ä–∂–µ. –¶–µ–Ω—ã ETF –æ—Ç—Ä–∞–∂–∞—é—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ —Ñ–æ–Ω–¥–∞, –∞ —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∞—é—Ç –±–∏—Ä–∂–µ–≤–æ–π —Å–ø—Ä–æ—Å/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –∫–æ–º–∏—Å—Å–∏–∏.*")
        else: 
            result_parts.append("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ETF (AlphaVantage).")
    else:
        result_parts.append("  ‚ÑπÔ∏è Alpha Vantage API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–∞–Ω–Ω—ã–µ –ø–æ ETF –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    # --- "–ß–∏—Å—Ç—ã–µ" –∏–Ω–¥–µ–∫—Å—ã —á–µ—Ä–µ–∑ yfinance ---
    index_tickers = {
        "S&P 500 Index (^GSPC)": "^GSPC",
        "NASDAQ Composite Index (^IXIC)": "^IXIC",
        "DAX Index (^GDAXI)": "^GDAXI",
        "Nikkei 225 Index (^N225)": "^N225",
        "FTSE 100 Index (^FTSE)": "^FTSE"
    }
    index_info_list = []
    for name, symbol in index_tickers.items():
        try:
            ticker = yf.Ticker(symbol)
            hist = ticker.history(period="2d") 
            if hist.empty or len(hist) < 2:
                index_info_list.append(f"  {name}: ‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (yfinance)")
                continue

            prev_close = hist['Close'].iloc[0]
            current_price = hist['Close'].iloc[-1]

            change = current_price - prev_close
            change_percent = (change / prev_close) * 100

            current_price_formatted = f"{current_price:,.2f} pts"
            
            index_change_emoji = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
            if change_percent > 0:
                index_change_emoji = "üü¢" # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞, —Ç.–∫. –≤ —Å–∫–æ–±–∫–∞—Ö
            elif change_percent < 0:
                index_change_emoji = "üî¥" # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞
            elif change_percent == 0: # —è–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–ª—å
                index_change_emoji = "‚ö™ " # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ ""    
            
            index_info_list.append(f"  {index_change_emoji}{name}: {current_price_formatted} ({change_percent:+.2f}%)")
        except Exception as e:
            index_info_list.append(f"  {name}: ‚ùå –æ—à–∏–±–∫–∞ ({e})")

    if index_info_list:
        if etf_info_list and ALPHA_KEY: result_parts.append("") 
        result_parts.extend(index_info_list)
        result_parts.append("    ‚îî‚îÄ *–ó–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—ã—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø—É–Ω–∫—Ç–∞—Ö –∏ —è–≤–ª—è—é—Ç—Å—è ¬´—á–∏—Å—Ç—ã–º–∏¬ª —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤–µ–ª–∏—á–∏–Ω–∞–º–∏, –æ—Ç—Ä–∞–∂–∞—é—â–∏–º–∏ —Å–æ–≤–æ–∫—É–ø–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–π, –≤—Ö–æ–¥—è—â–∏—Ö –≤ –∏–Ω–¥–µ–∫—Å.*")
    elif not ALPHA_KEY and not index_info_list : 
         result_parts.append("  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º.")


    if len(result_parts) == 1: 
         result_parts.append("  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –∏ ETF.")

    return "\n".join(result_parts)