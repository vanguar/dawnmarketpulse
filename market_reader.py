import os
import requests
from datetime import date, datetime, timedelta
import yfinance as yf # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º yfinance

ALPHA_KEY = os.getenv("ALPHA_KEY")

def get_crypto_data(extended=False):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º —Å CoinGecko API,
    –¥–æ–±–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ BTC —Å 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π.
    """
    try:
        today_date_str = date.today().strftime("%d.%m.%Y")

        url = (
            "https://api.coingecko.com/api/v3/coins/markets"
            "?vs_currency=usd"
            "&order=market_cap_desc"
            "&per_page=10"
            "&page=1"
            "&sparkline=false"
            "&price_change_percentage=24h"
        )

        headers = {
            'User-Agent': 'DawnMarketPulseBot/1.0 (+https://t.me/DawnMarketPulse)'
        }

        r = requests.get(url, timeout=15, headers=headers)
        r.raise_for_status()
        data = r.json()

        result_lines = [f"‚Çø –ö—Ä–∏–ø—Ç–∞ –Ω–∞ {today_date_str} (–¢–æ–ø-10 –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏)"]
        insights = []

        if not data:
            result_lines.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –æ—Ç CoinGecko.")
            return "\n".join(result_lines)

        for coin_data in data:
            symbol = coin_data.get("symbol", "N/A").upper()
            name = coin_data.get("name", "Unknown Coin")
            price = coin_data.get("current_price")
            change_24h = coin_data.get("price_change_percentage_24h")

            if price is None or change_24h is None:
                result_lines.append(f"{symbol}: ‚ùå –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({name})")
                continue

            emoji = "üìà" if change_24h > 0 else "üìâ" if change_24h < 0 else "üìä"

            if 0 < price < 1.0:
                price_format = f"${price:,.4f}"
            elif price == 0:
                price_format = "$0.0000"
            else:
                price_format = f"${price:,.2f}"

            result_lines.append(f"{emoji} {symbol}: {price_format} ({change_24h:+.2f}%)")

            if extended:
                if abs(change_24h) >= 7:
                    direction = "—Ä–∞—Å—Ç—ë—Ç" if change_24h > 0 else "–ø–∞–¥–∞–µ—Ç"
                    insights.append(f"‚Äî {symbol} ({name}) {direction} –±–æ–ª–µ–µ —á–µ–º –Ω–∞ {abs(change_24h):.1f}%. –í–æ–∑–º–æ–∂–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å.")
                elif 0 < abs(change_24h) < 1:
                    insights.append(f"‚Äî {symbol} ({name}) –ø–æ—á—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ({change_24h:+.2f}%). –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è.")

        if extended and insights:
            result_lines.append("\n‚Üí –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º:")
            result_lines.extend(insights)

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ BTC —Å 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π
        try:
            btc_ticker_yf = yf.Ticker("BTC-USD")
            btc_hist = btc_ticker_yf.history(period="8d")

            if not btc_hist.empty and len(btc_hist) >= 2:
                current_price_btc = btc_hist['Close'].iloc[-1]

                if len(btc_hist) >= 8:
                    sma7_btc = btc_hist['Close'].iloc[-8:-1].mean()
                    btc_sma_info_line = f"\nüí° BTC (${current_price_btc:,.2f}) "

                    if current_price_btc > sma7_btc:
                        btc_sma_info_line += f"–≤—ã—à–µ —Å–≤–æ–µ–π 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π (${sma7_btc:,.2f})."
                    elif current_price_btc < sma7_btc:
                        btc_sma_info_line += f"–Ω–∏–∂–µ —Å–≤–æ–µ–π 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π (${sma7_btc:,.2f})."
                    else:
                        btc_sma_info_line += f"–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–≤–æ–µ–π 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π (${sma7_btc:,.2f})."

                    result_lines.append(btc_sma_info_line)
                else:
                    result_lines.append(f"\nüí° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ 7-–¥–Ω–µ–≤–Ω–æ–π SMA –¥–ª—è BTC ({len(btc_hist)} –¥–Ω.).")
            else:
                result_lines.append("\nüí° –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTC (yfinance).")
        except Exception as e_sma:
            result_lines.append("üí° –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å 7-–¥–Ω–µ–≤–Ω—É—é —Å—Ä–µ–¥–Ω—é—é –¥–ª—è BTC. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: " + repr(e_sma))

        return "\n".join(result_lines)

    except requests.exceptions.HTTPError as http_err:
        return "–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: " + repr(http_err)
    except requests.exceptions.Timeout:
        return "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –æ—Ç CoinGecko."
    except requests.exceptions.RequestException as req_err:
        return "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: " + repr(req_err)
    except Exception as e:
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: " + repr(e)



def get_market_data_text():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–æ–Ω–¥–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–∞–º (ETF —á–µ—Ä–µ–∑ Alpha Vantage, "—á–∏—Å—Ç—ã–µ" –∏–Ω–¥–µ–∫—Å—ã —á–µ—Ä–µ–∑ yfinance).
    """
    result_parts = ["üìä –ò–Ω–¥–µ–∫—Å—ã –∏ ETF"]

    # --- ETF —á–µ—Ä–µ–∑ Alpha Vantage ---
    etf_tickers = {
        "S&P 500 ETF (SPY)": "SPY",
        "NASDAQ 100 ETF (QQQ)": "QQQ",
        # "MSCI Japan ETF (EWJ)": "EWJ" # ETF –Ω–∞ –Ø–ø–æ–Ω–∏—é, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
    }
    etf_info_list = []
    if ALPHA_KEY: # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Alpha Vantage, –µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å
        for name, symbol in etf_tickers.items():
            try:
                url = f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey={ALPHA_KEY}"
                r = requests.get(url, timeout=10)
                r.raise_for_status()
                data = r.json()
                quote = data.get("Global Quote")
                if not quote or "05. price" not in quote or "10. change percent" not in quote:
                    etf_info_list.append(f"{name}: ‚ùå –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (AlphaVantage)")
                    continue

                price_str = quote["05. price"]
                change_percent_str = quote["10. change percent"].rstrip('%')

                price = float(price_str)
                change_percent = float(change_percent_str)

                etf_info_list.append(f"{name}: ${price:,.2f} ({change_percent:+.2f}%)")
            except Exception as e:
                etf_info_list.append(f"{name}: ‚ùå –æ—à–∏–±–∫–∞ ({e})")
        if etf_info_list:
            result_parts.extend(etf_info_list)
            result_parts.append("   ‚îî‚îÄ *ETF (Exchange Traded Fund) ‚Äî —ç—Ç–æ —Ñ–æ–Ω–¥, –∞–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–æ—Ä–≥—É—é—Ç—Å—è –Ω–∞ –±–∏—Ä–∂–µ. –¶–µ–Ω—ã ETF –æ—Ç—Ä–∞–∂–∞—é—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ —Ñ–æ–Ω–¥–∞, –∞ —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∞—é—Ç –±–∏—Ä–∂–µ–≤–æ–π —Å–ø—Ä–æ—Å/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –∫–æ–º–∏—Å—Å–∏–∏.*")

    else:
        result_parts.append("Alpha Vantage API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–∞–Ω–Ω—ã–µ –ø–æ ETF –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    # --- "–ß–∏—Å—Ç—ã–µ" –∏–Ω–¥–µ–∫—Å—ã —á–µ—Ä–µ–∑ yfinance ---
    index_tickers = {
        "S&P 500 Index (^GSPC)": "^GSPC",
        "NASDAQ Composite Index (^IXIC)": "^IXIC",
        "DAX Index (^GDAXI)": "^GDAXI", # –¢–∏–∫–µ—Ä DAX –¥–ª—è Yahoo Finance
        "Nikkei 225 Index (^N225)": "^N225",
        "FTSE 100 Index (^FTSE)": "^FTSE"
    }
    index_info_list = []
    for name, symbol in index_tickers.items():
        try:
            ticker = yf.Ticker(symbol)
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            hist = ticker.history(period="2d")
            if hist.empty or len(hist) < 2:
                index_info_list.append(f"{name}: ‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (yfinance)")
                continue

            prev_close = hist['Close'].iloc[0]
            current_price = hist['Close'].iloc[-1] # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è

            change = current_price - prev_close
            change_percent = (change / prev_close) * 100

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
            current_price_formatted = f"{current_price:,.2f} pts"
            index_info_list.append(f"{name}: {current_price_formatted} ({change_percent:+.2f}%)")
        except Exception as e:
            index_info_list.append(f"{name}: ‚ùå –æ—à–∏–±–∫–∞ ({e})")

    if index_info_list:
        if etf_info_list and index_info_list : result_parts.append("") # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞, –µ—Å–ª–∏ –æ–±–∞ –±–ª–æ–∫–∞ –µ—Å—Ç—å
        result_parts.extend(index_info_list)
        result_parts.append("   ‚îî‚îÄ *–ó–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—ã—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø—É–Ω–∫—Ç–∞—Ö –∏ —è–≤–ª—è—é—Ç—Å—è ¬´—á–∏—Å—Ç—ã–º–∏¬ª —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤–µ–ª–∏—á–∏–Ω–∞–º–∏, –æ—Ç—Ä–∞–∂–∞—é—â–∏–º–∏ —Å–æ–≤–æ–∫—É–ø–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–π, –≤—Ö–æ–¥—è—â–∏—Ö –≤ –∏–Ω–¥–µ–∫—Å.*")


    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–ª–æ–∫
    if not etf_info_list and not index_info_list:
         result_parts.append("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –∏ ETF.")

    return "\n".join(result_parts)