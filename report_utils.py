"""Utility helpers for GPT-based operations and sentiment analysis.

This module provides:
    * call_gpt ‚Äì safe wrapper around ``openai.ChatCompletion.create`` with simple retry logic.
    * get_sentiment_description_for_report ‚Äì helper that converts numeric TextBlob sentiment
      scores into Russian text suitable for Telegram reports.
    * analyze_sentiment ‚Äì user‚Äëfriendly wrapper that returns a formatted sentiment summary.

The sentiment‚Äërelated functions are left exactly as before, while the GPT helper has been
re‚Äëadded to keep backward compatibility with ``main.py``.
"""

from __future__ import annotations

import os
import time
from datetime import datetime

import openai
from textblob import TextBlob

from custom_logger import log

# ---------------------------------------------------------------------------
# üí¨ GPT helper
# ---------------------------------------------------------------------------

MODEL_DEFAULT: str = "gpt-4o-mini"
TIMEOUT: int = 120  # seconds


def call_gpt(
    *,
    system_prompt: str,
    user_content: str = "",
    model: str = MODEL_DEFAULT,
    max_tokens: int = 400,
    temperature: float = 0.4,
    retries: int = 3,
) -> str:
    """Call OpenAI GPT model with automatic retries.

    Args:
        system_prompt: Content for the *system* role.
        user_content: Content for the *user* role.
        model: OpenAI model name (default ``gpt-4o-mini``).
        max_tokens: Max tokens to generate.
        temperature: Sampling temperature.
        retries: How many times to retry on transient API errors.

    Returns:
        Assistant's reply on success, or a stub string if all attempts fail.
    """
    messages: list[dict[str, str]] = []
    if system_prompt:
        messages.append({"role": "system", "content": system_prompt})
    if user_content:
        messages.append({"role": "user", "content": user_content})

    for attempt in range(retries):
        try:
            resp = openai.ChatCompletion.create(
                model=model,
                messages=messages,
                max_tokens=max_tokens,
                temperature=temperature,
                timeout=TIMEOUT,
            )
            return resp.choices[0].message.content.strip()
        except openai.error.OpenAIError as exc:
            log(
                f"[call_gpt] attempt {attempt + 1}/{retries} failed: {type(exc).__name__}: {exc}"
            )
            # Exponential backoff: 1s, 2s, 4s, ...
            time.sleep(2 ** attempt)

    return "‚ö†Ô∏è call_gpt: No response from OpenAI after several attempts."


# ---------------------------------------------------------------------------
# üß† Sentiment‚Äëanalysis helpers (unchanged)
# ---------------------------------------------------------------------------

def get_sentiment_description_for_report(polarity: float, subjectivity: float):
    """Return human‚Äëreadable sentiment descriptions for Telegram reports."""
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è—Ä–Ω–æ—Å—Ç–∏ (—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
    pol_desc_short = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if polarity > 0.15:
        pol_desc_short = "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è"
    elif polarity < -0.15:
        pol_desc_short = "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è"

    # –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è (—Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    sub_style_desc = "–æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    comment_text = (
        "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Ñ–∞–∫—Ç–∞—Ö –∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∏–ª–∏ –ª–∏—á–Ω—ã—Ö –º–Ω–µ–Ω–∏–π."
    )

    if subjectivity > 0.75:  # –û—á–µ–Ω—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π
        sub_style_desc = "–æ—á–µ–Ω—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å"
        comment_text = (
            "–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—á–Ω—ã—Ö –º–Ω–µ–Ω–∏–π, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç—Ö–æ–¥—è –æ—Ç —á–∏—Å—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è."
        )
    elif subjectivity > 0.45:  # –£–º–µ—Ä–µ–Ω–Ω–æ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π
        sub_style_desc = "—É–º–µ—Ä–µ–Ω–Ω–æ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å"
        comment_text = (
            "–í —Ç–µ–∫—Å—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ª–∏—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏, –º–Ω–µ–Ω–∏–π –∏–ª–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π –Ω–∞—Ä—è–¥—É —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
        )

    return pol_desc_short, sub_style_desc, comment_text


def analyze_sentiment(text_to_analyze: str) -> str:
    """Analyze sentiment of *text_to_analyze* and return a nicely formatted summary."""
    if not isinstance(text_to_analyze, str) or not text_to_analyze.strip():
        return (
            "üß† –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ GPT:\n        ‚Ä¢ –û—à–∏–±–∫–∞: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –ø—É—Å—Ç."
        )

    try:
        blob = TextBlob(text_to_analyze)
        polarity = blob.sentiment.polarity
        subjectivity = blob.sentiment.subjectivity

        pol_desc_short, sub_style_desc, comment_text = get_sentiment_description_for_report(
            polarity, subjectivity
        )

        tone_emoji = "üìä"  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if polarity > 0.15:
            tone_emoji = "üìà"  # –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ
        elif polarity < -0.15:
            tone_emoji = "üìâ"  # –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ

        return (
            f"üß† –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ GPT:\n\n"
            f"{tone_emoji} –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {pol_desc_short} (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {polarity:.2f})\n"
            f"üßê –°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è: {sub_style_desc} (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {subjectivity:.2f})\n\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç GPT-–ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {comment_text}"
        )

    except Exception as exc:  # pylint: disable=broad-except
        log(f"[analyze_sentiment] error: {type(exc).__name__}: {exc}")
        return (
            "üß† –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ GPT:\n        ‚Ä¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
        )

# ---------------------------------------------------------------------------
# End of file
# -------------------------------------------------------------------------