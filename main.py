#!/usr/bin/env python3
import os
import sys
import requests
import openai
from datetime import datetime, timezone, date
from textwrap import wrap
from time import sleep

# ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
openai.api_key = os.getenv("OPENAI_KEY")
TG_TOKEN = os.getenv("TG_TOKEN")  # –£–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª
CHAT_ID = os.getenv("CHANNEL_ID")  # –£–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ CHANNEL_ID –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ CHAT_ID - –æ—Å—Ç–∞–≤—å—Ç–µ

MODEL = "gpt-4o-mini"  # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ gpt-4o
TIMEOUT = 60
GPT_TOKENS = 450  # ‚âà 1 700-1 900 —Å–∏–º–≤.
TG_LIMIT = 4096  # –ª–∏–º–∏—Ç Telegram
CUT_LEN = 3500  # –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è wrap –±—É–¥–µ—Ç CUT_LEN - 50)

# ‚îÄ‚îÄ PROMPT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PROMPT = """
üóìÔ∏è **–£—Ç—Ä–µ–Ω–Ω–∏–π –æ–±–∑–æ—Ä ‚Ä¢ {date}** ‚òÄÔ∏è

---

üìä **–°–∏—Ç—É–∞—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–∞—Ö:**

* **–ò–Ω–¥–µ–∫—Å—ã** (S&P 500, DAX, Nikkei, Nasdaq fut):
    * _–û—Å–Ω–æ–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏._
    * ‚û°Ô∏è _–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞? –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑._

---

üöÄ **–ê–∫—Ü–∏–∏: –í–∑–ª–µ—Ç—ã –∏ –ü–∞–¥–µ–Ω–∏—è** üìâ

* **–õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞** (2-3 –±—É–º–∞–≥–∏):
    * _–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ç–∏–∫–µ—Ä): –ø—Ä–∏—á–∏–Ω–∞ —Ä–æ—Å—Ç–∞ (–Ω–æ–≤–æ—Å—Ç—å, –æ—Ç—á–µ—Ç, –∏ —Ç.–¥.)._
* **–ê—É—Ç—Å–∞–π–¥–µ—Ä—ã** (2-3 –±—É–º–∞–≥–∏):
    * _–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ç–∏–∫–µ—Ä): –ø—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è._
* ‚û°Ô∏è _–û–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –∞–∫—Ü–∏–π._

---

‚Çø **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: –û–±–∑–æ—Ä** üíé

* **–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã** (BTC, ETH):
    * _–î–∏–Ω–∞–º–∏–∫–∞, –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏._
* **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã** (–¥–æ 3):
    * _–ù–∞–∑–≤–∞–Ω–∏–µ: –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞, –ø—Ä–∏—á–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞._
* ‚û°Ô∏è _–í—ã–≤–æ–¥ –ø–æ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫—É._

---

üì∞ **–ì–ª–∞–≤–Ω—ã–µ –º–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏:**

* _(–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1): –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ._
* _(–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2): –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ._
* _(–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3): –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ._

---

üó£Ô∏è **–¶–∏—Ç–∞—Ç—ã –¥–Ω—è:**

* _"–¶–∏—Ç–∞—Ç–∞ 1"_ - _–ê–≤—Ç–æ—Ä/–ò—Å—Ç–æ—á–Ω–∏–∫. (–ö—Ä–∞—Ç–∫–∏–π —Å–º—ã—Å–ª –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç)._
* _"–¶–∏—Ç–∞—Ç–∞ 2"_ - _–ê–≤—Ç–æ—Ä/–ò—Å—Ç–æ—á–Ω–∏–∫. (–ö—Ä–∞—Ç–∫–∏–π —Å–º—ã—Å–ª –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç)._ (–ï—Å–ª–∏ –µ—Å—Ç—å)

---

ü§î **–ß–∏—Å–ª–æ / –§–∞–∫—Ç –¥–Ω—è:**

* _–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ñ–∞–∫—Ç/—á–∏—Å–ª–æ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ._

---

üí° **–ò–¥–µ—è –¥–Ω—è / Actionable —Å–æ–≤–µ—Ç:**

* ‚ö°Ô∏è _–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –∏–¥–µ—è –Ω–∞ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è/–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è._

---
‚ÄºÔ∏è **–í–∞–∂–Ω–æ:** –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º. –≠–º–æ–¥–∑–∏ –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏. HTML/Markdown –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. –ú–∞–∫—Å–∏–º—É–º ~1600 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≤—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.
"""

TG_URL = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"

# ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def log(msg: str) -> None:
    print(f"[{datetime.now(timezone.utc):%Y-%m-%d %H:%M:%S %Z}] {msg}", flush=True) # –î–æ–±–∞–≤–∏–ª %Z –¥–ª—è —Ç–∞–π–º–∑–æ–Ω—ã

def gpt_report() -> str:
    try:
        resp = openai.ChatCompletion.create(
            model=MODEL,
            messages=[{"role": "user", "content": PROMPT.format(date=date.today().strftime("%d.%m.%Y"))}], # –î–æ–±–∞–≤–∏–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            timeout=TIMEOUT,
            temperature=0.4, # –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (0.5-0.7), –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã —Å–ª–∏—à–∫–æ–º —Å—É—Ö–∏–µ
            max_tokens=GPT_TOKENS,
        )
        return resp.choices[0].message.content.strip()
    except openai.error.OpenAIError as e: # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ OpenAI
        log(f"OpenAI API Error: {e}")
        raise # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã main –º–æ–≥ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    except Exception as e:
        log(f"Error in gpt_report: {e}")
        raise

def chunk(text: str, size: int = CUT_LEN):
    # –ó–∞–ø–∞—Å 50 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ CUT_LEN.
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è textwrap –±—É–¥–µ—Ç size - 50 - –¥–ª–∏–Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞ (–º–∞–∫—Å ~10 –¥–ª—è "(10/10)\n")
    # –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –±—É–¥–µ—Ç –æ–∫–æ–ª–æ 60+ —Å–∏–º–≤–æ–ª–æ–≤.
    effective_width = size - 50 - 10 # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞
    parts = wrap(text, width=effective_width,
                 break_long_words=False,
                 replace_whitespace=False, # –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –æ—Ç GPT
                 drop_whitespace=True,
                 break_on_hyphens=False)
    total = len(parts)
    if total == 0: # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ strip
        return [""] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω—É –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤ —Ü–∏–∫–ª–µ
    if total == 1:
        return parts
    return [f"({i+1}/{total})\n{p.strip()}" for i, p in enumerate(parts) if p.strip()] # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ wrap –∏—Ö —Å–æ–∑–¥–∞–ª

def send(part: str):
    if not part: # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        log("Attempted to send an empty part. Skipping.")
        return

    json_payload = {
        "chat_id": CHAT_ID,
        "text": part,
        "disable_web_page_preview": True
        # "parse_mode": "MarkdownV2" # –∏–ª–∏ "HTML" –µ—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ —Ç–æ–≥–¥–∞ PROMPT –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å
    }
    try:
        r = requests.post(TG_URL, json=json_payload, timeout=10)
        r.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)
        log(f"Part sent successfully to {CHAT_ID}.")
    except requests.exceptions.HTTPError as e:
        log(f"TG HTTP Error {r.status_code} for {CHAT_ID}: {r.text}. Error: {e}")
    except requests.exceptions.RequestException as e:
        log(f"TG Request Error for {CHAT_ID}: {e}")
    except Exception as e:
        log(f"Generic error in send function for {CHAT_ID}: {e}")


# ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    log("Script started. Attempting to generate and send report...")
    try:
        report_text = gpt_report()
        if not report_text or report_text.isspace():
            log("GPT returned an empty or whitespace-only report. Exiting.")
            return

        segments = chunk(report_text)
        if not segments or not any(s.strip() for s in segments): # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—Å—Ç—å –Ω–µ–ø—É—Å—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            log("Chunking resulted in no valid segments. Exiting.")
            return

        log(f"Report chunked into {len(segments)} segment(s).")

        for i, seg in enumerate(segments):
            log(f"Sending segment {i+1}/{len(segments)}...")
            send(seg)
            if i < len(segments) - 1: # –ü–∞—É–∑–∞ –Ω–µ –Ω—É–∂–Ω–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                sleep(1.5)  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–ª –ø–∞—É–∑—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        log("All segments processed. Posted OK.")
    except openai.error.OpenAIError as e: # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ API OpenAI –æ—Ç–¥–µ–ª—å–Ω–æ
        log(f"Fatal OpenAI API Error: {e}")
        sys.exit(1)
    except requests.exceptions.RequestException as e: # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
        log(f"Fatal Telegram API Request Error: {e}")
        sys.exit(1)
    except Exception as e:
        log(f"Fatal error in main execution: {e}")
        import traceback
        log(f"Traceback: {traceback.format_exc()}") # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π—Å–±–µ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        sys.exit(1)

if __name__ == "__main__":
    main()

