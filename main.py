#!/usr/bin/env python3
import pytz
import nltk
# –ò—Å–ø–æ–ª—å–∑—É–µ–º quiet=True, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥–∞—Ö –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
nltk.download('punkt', quiet=True)
nltk.download('wordnet', quiet=True)
nltk.download('averaged_perceptron_tagger', quiet=True)

import os
import sys
import requests
import openai
from datetime import datetime, timezone, date
from time import sleep
import traceback
import re

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ –º–æ–¥—É–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ PYTHONPATH
from market_reader import get_market_data_text, get_crypto_data
from news_reader import get_news_block # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç_–Ω–æ–≤–æ—Å—Ç–µ–π, –µ—Å—Ç—å_–ª–∏_–Ω–æ–≤–æ—Å—Ç–∏)
from analyzer import keyword_alert, store_and_compare
from report_utils import analyze_sentiment

from metrics_reader import get_derivatives_block
#from whale_alert_reader import get_whale_activity_summary
from whale_alert_reader import get_whale_activity_summary
from fng_reader import get_fear_and_greed_index_text
from datetime import datetime, timezone, date, timedelta


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
openai.api_key = os.getenv("OPENAI_KEY")
TG_TOKEN = os.getenv("TG_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
MARKETAUX_KEY = os.getenv("MARKETAUX_KEY") # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∫–ª—é—á —Ç–æ–∂–µ —á–∏—Ç–∞–µ—Ç—Å—è, –µ—Å–ª–∏ news_reader –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç

MODEL = "gpt-4o-mini"
TIMEOUT = 60
TG_LIMIT_BYTES = 3800 # –£–≤–µ–ª–∏—á–µ–Ω–æ, –ø–æ–¥–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
GPT_TOKENS = 1800 # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–æ, –µ—Å–ª–∏ GPT –æ–±—Ä–µ–∑–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã

# --- –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è GPT ---
GPT_CONTINUATION_WITH_NEWS = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –¥–∞–ª–µ–µ –¥–∞–π —Å–≤–æ–¥–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º, —Ñ–æ–∫—É—Å–∏—Ä—É—è—Å—å –Ω–∞ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ –∏ –æ–±—â–∏—Ö –≤—ã–≤–æ–¥–∞—Ö:

–ê–∫—Ü–∏–∏-–ª–∏–¥–µ—Ä—ã üöÄ / –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã üìâ
- –ø–æ 2‚Äì3 –±—É–º–∞–≥–∏ + –ø—Ä–∏—á–∏–Ω–∞ (–º–æ–∂–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π)

‚Üí –í—ã–≤–æ–¥ –ø–æ —Ñ–æ–Ω–¥–æ–≤–æ–º—É —Ä—ã–Ω–∫—É.

–ú–∞–∫—Ä–æ-—Ñ–∞–∫—Ç–æ—Ä—ã –∏ –æ–±—â–∏–µ –≤—ã–≤–æ–¥—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π):
- –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ.
- –û–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ (–∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è –∏ —Ñ–æ–Ω–¥–æ–≤—ã–π, –∏ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).

–¶–∏—Ç–∞—Ç—ã –¥–Ω—è üó£
- –¥–æ 2 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ü–∏—Ç–∞—Ç + —Å–º—ã—Å–ª (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –æ–±—â–∏–µ)

–ß–∏—Å–ª–æ-—Ñ–∞–∫—Ç ü§î (–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ —Ä—ã–Ω–∫–∞—Ö –∏–ª–∏ —ç–∫–æ–Ω–æ–º–∏–∫–µ)

‚ö°Ô∏è –ò–¥–µ—è –¥–Ω—è ‚Äì 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è actionable-—Å–æ–≤–µ—Ç–∞.

‚ÄºÔ∏è –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ HTML –∏ markdown. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π**, _–∫—É—Ä—Å–∏–≤_, `–∫–æ–¥` –∏–ª–∏ #–∑–∞–≥–æ–ª–æ–≤–∫–∏.
‚ÄºÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –î–í–û–ô–ù–´–ú–ò –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏.
‚ÄºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤.
‚ÄºÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–∞–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∏–Ω–¥–µ–∫—Å–∞–º, –ª–æ–Ω–≥–∞–º/—à–æ—Ä—Ç–∞–º –∏ –∫–∏—Ç–æ–≤—ã–º –ø–µ—Ä–µ–≤–æ–¥–∞–º —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –∞–Ω–∞–ª–∏–∑ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏."""

GPT_CONTINUATION_NO_NEWS = """–î–∞–π —Å–≤–æ–¥–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö –∏ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ (–Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã), —Ñ–æ–∫—É—Å–∏—Ä—É—è—Å—å –Ω–∞ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ –∏ –æ–±—â–∏—Ö –≤—ã–≤–æ–¥–∞—Ö:

–ê–∫—Ü–∏–∏-–ª–∏–¥–µ—Ä—ã üöÄ / –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã üìâ
- –ø–æ 2‚Äì3 –±—É–º–∞–≥–∏ + –ø—Ä–∏—á–∏–Ω–∞

‚Üí –í—ã–≤–æ–¥ –ø–æ —Ñ–æ–Ω–¥–æ–≤–æ–º—É —Ä—ã–Ω–∫—É.

–û–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π).

–¶–∏—Ç–∞—Ç—ã –¥–Ω—è üó£
- –¥–æ 2 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ü–∏—Ç–∞—Ç + —Å–º—ã—Å–ª

–ß–∏—Å–ª–æ-—Ñ–∞–∫—Ç ü§î (–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ —Ä—ã–Ω–∫–∞—Ö –∏–ª–∏ —ç–∫–æ–Ω–æ–º–∏–∫–µ)

‚ö°Ô∏è –ò–¥–µ—è –¥–Ω—è ‚Äì 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è actionable-—Å–æ–≤–µ—Ç–∞.

‚ÄºÔ∏è –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ HTML –∏ markdown. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π**, _–∫—É—Ä—Å–∏–≤_, `–∫–æ–¥` –∏–ª–∏ #–∑–∞–≥–æ–ª–æ–≤–∫–∏.
‚ÄºÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –î–í–û–ô–ù–´–ú–ò –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏.
‚ÄºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤.
‚ÄºÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–∞–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∏–Ω–¥–µ–∫—Å–∞–º, –ª–æ–Ω–≥–∞–º/—à–æ—Ä—Ç–∞–º –∏ –∫–∏—Ç–æ–≤—ã–º –ø–µ—Ä–µ–≤–æ–¥–∞–º —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –∞–Ω–∞–ª–∏–∑ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏."""


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def log(msg):
    timestamp = f"[{datetime.now(timezone.utc):%Y-%m-%d %H:%M:%S} UTC]"
    print(f"{timestamp} {msg}", flush=True)

def safe_call(func, retries=3, delay=5, label="‚ùó –û—à–∏–±–∫–∞"):
    for i in range(retries):
        try:
            return func()
        except requests.exceptions.Timeout:
            log(f"{label}: –ø–æ–ø—ã—Ç–∫–∞ {i + 1}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å - –¢–∞–π–º–∞—É—Ç ({TIMEOUT}—Å)")
            if i < retries - 1:
                sleep(delay)
        except requests.exceptions.RequestException as e:
            log(f"{label}: –ø–æ–ø—ã—Ç–∫–∞ {i + 1}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å - –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            if i < retries - 1:
                sleep(delay)
        except Exception as e:
            log(f"{label}: –ø–æ–ø—ã—Ç–∫–∞ {i + 1}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å - –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            log(traceback.format_exc())
            if i < retries - 1:
                sleep(delay)
    log(f"{label}: –≤—Å–µ {retries} –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.")
    return None

# --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ ---

def gpt_report():
    today_date_str = date.today().strftime("%d.%m.%Y")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–ª–∞–≥, –µ—Å—Ç—å –ª–∏ –æ–Ω–∏
    # get_news_block() –∏–∑ news_reader.py –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç_–±–ª–æ–∫–∞_–Ω–æ–≤–æ—Å—Ç–µ–π_–¥–ª—è_GPT, —Ñ–ª–∞–≥_–Ω–∞–ª–∏—á–∏—è_—Ä–µ–∞–ª—å–Ω—ã—Ö_–Ω–æ–≤–æ—Å—Ç–µ–π)
    news_text_for_gpt, has_actual_news = get_news_block() 

    header_for_gpt = f"üìÖ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ {today_date_str}"
    current_gpt_continuation = ""
    
    if has_actual_news:
        log("üì∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPT_CONTINUATION_WITH_NEWS.")
        dynamic_data = (
            f"{header_for_gpt}\n\n"
            f"--- –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –ù–û–í–û–°–¢–ò –†–´–ù–ö–ê (–¥–ª—è —Ç–≤–æ–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞) ---\n"
            f"{news_text_for_gpt}\n\n" 
            f"--- –ó–ê–î–ê–ù–ò–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê ---\n"
            f"{GPT_CONTINUATION_WITH_NEWS}"
        )
        current_gpt_continuation = "WITH_NEWS"
    else:
        log("üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPT_CONTINUATION_NO_NEWS.")
        dynamic_data = (
            f"{header_for_gpt}\n\n"
            f"(–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π, –≥–¥–µ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ.)\n\n"
            f"--- –ó–ê–î–ê–ù–ò–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê ---\n"
            f"{GPT_CONTINUATION_NO_NEWS}"
        )
        current_gpt_continuation = "NO_NEWS"
    
    log(f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è GPT (–¥–ª–∏–Ω–∞): {len(dynamic_data)} —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–æ–º–ø—Ç: {current_gpt_continuation}. –ü–µ—Ä–≤—ã–µ 200: {dynamic_data[:200]}...")

    response = safe_call(
        lambda: openai.ChatCompletion.create(
            model=MODEL,
            messages=[{"role": "user", "content": dynamic_data}],
            timeout=TIMEOUT, 
            temperature=0.4,
            max_tokens=GPT_TOKENS,
        ),
        label="‚ùó –û—à–∏–±–∫–∞ OpenAI"
    )
    if not response:
        raise RuntimeError("OpenAI –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    
    generated_text = response.choices[0].message.content.strip()
    log(f"üìù GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç ({len(generated_text)} —Å–∏–º–≤–æ–ª–æ–≤).")
    return generated_text

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram ---
def prepare_text(text_to_prepare):
    if not isinstance(text_to_prepare, str):
        log(f"‚ö†Ô∏è prepare_text –ø–æ–ª—É—á–∏–ª –Ω–µ —Å—Ç—Ä–æ–∫—É: {type(text_to_prepare)}. –í–æ–∑–≤—Ä–∞—â–∞—é –∫–∞–∫ –µ—Å—Ç—å.")
        return str(text_to_prepare) 

    for marker in ["üìä", "üöÄ", "üìâ", "‚Çø", "üì∞", "üó£", "ü§î", "‚ö°Ô∏è", "üîç", "üìà", "üß†", "‚öñÔ∏è", "üêã", "ü§ñ"]: # –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        text_to_prepare = re.sub(f"({marker}[^\n]*)\n(?!\n)", r"\1\n\n", text_to_prepare)
    
    text_to_prepare = re.sub(r"(\n‚Üí[^\n]*)\n(?!\n)", r"\1\n\n", text_to_prepare) 
    
    while "\n\n\n" in text_to_prepare:
        text_to_prepare = text_to_prepare.replace("\n\n\n", "\n\n")
    return text_to_prepare.strip()


def force_split_long_string(long_str, limit_b):
    sub_chunks = []
    if not long_str: 
        return sub_chunks
    
    encoded_str = long_str.encode('utf-8')
    current_byte_pos = 0
    while current_byte_pos < len(encoded_str):
        end_byte_pos = min(current_byte_pos + limit_b, len(encoded_str))
        byte_slice_candidate = encoded_str[current_byte_pos:end_byte_pos]
        
        while True:
            try:
                decoded_chunk = byte_slice_candidate.decode('utf-8')
                sub_chunks.append(decoded_chunk)
                current_byte_pos += len(byte_slice_candidate) 
                break 
            except UnicodeDecodeError:
                if len(byte_slice_candidate) > 1:
                    byte_slice_candidate = byte_slice_candidate[:-1] 
                else:
                    log(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º—ã–π –±–∞–π—Ç –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Ä–µ–∑–∫–µ: {encoded_str[current_byte_pos:current_byte_pos+1]!r}")
                    current_byte_pos += 1 
                    break 
    return sub_chunks


def smart_chunk(text_to_chunk, outer_limit_bytes):
    paragraphs = text_to_chunk.split("\n\n") 
    final_result_chunks = []
    current_accumulated_parts = [] 
    current_accumulated_bytes = 0  

    for para_idx, paragraph_str in enumerate(paragraphs):
        if not paragraph_str.strip(): 
            continue

        paragraph_bytes = paragraph_str.encode('utf-8')
        separator_bytes_len = 2 if current_accumulated_parts else 0 

        if current_accumulated_bytes + separator_bytes_len + len(paragraph_bytes) <= outer_limit_bytes:
            if current_accumulated_parts: 
                current_accumulated_parts.append("\n\n")
            current_accumulated_parts.append(paragraph_str)
            current_accumulated_bytes += separator_bytes_len + len(paragraph_bytes)
        else:
            if current_accumulated_parts:
                final_result_chunks.append("".join(current_accumulated_parts))
            
            current_accumulated_parts = []
            current_accumulated_bytes = 0

            if len(paragraph_bytes) > outer_limit_bytes:
                log(f"‚ÑπÔ∏è –ê–±–∑–∞—Ü #{para_idx} '{paragraph_str[:30].replace(chr(10),' ')}...' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(paragraph_bytes)} –±–∞–π—Ç > {outer_limit_bytes} –±–∞–π—Ç), –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ–∑–∞–Ω.")
                split_long_paragraph_sub_chunks = force_split_long_string(paragraph_str, outer_limit_bytes)
                final_result_chunks.extend(split_long_paragraph_sub_chunks) 
            else:
                current_accumulated_parts.append(paragraph_str)
                current_accumulated_bytes = len(paragraph_bytes)
                
    if current_accumulated_parts:
        final_result_chunks.append("".join(current_accumulated_parts))

    return [chunk_item for chunk_item in final_result_chunks if chunk_item.strip()] 


def send(text_content, add_numeration_if_multiple_parts=False):
    prepared_text_content = prepare_text(str(text_content)) 
    
    prefix_max_allowance_bytes = 40 
    text_chunk_limit_for_smart_chunk = TG_LIMIT_BYTES 
    
    if add_numeration_if_multiple_parts:
        text_chunk_limit_for_smart_chunk = TG_LIMIT_BYTES - prefix_max_allowance_bytes
        
    parts_list = smart_chunk(prepared_text_content, text_chunk_limit_for_smart_chunk)
    total_parts_count = len(parts_list)

    if add_numeration_if_multiple_parts and total_parts_count == 1:
        log(f"‚ÑπÔ∏è –ù—É–º–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞, –Ω–æ –ø–æ–ª—É—á–∏–ª–∞—Å—å 1 —á–∞—Å—Ç—å —Å –ª–∏–º–∏—Ç–æ–º {text_chunk_limit_for_smart_chunk}. –ü–µ—Ä–µ–Ω–∞—Ä–µ–∑–∞–µ–º —Å –ø–æ–ª–Ω—ã–º –ª–∏–º–∏—Ç–æ–º {TG_LIMIT_BYTES}.")
        parts_list = smart_chunk(prepared_text_content, TG_LIMIT_BYTES) 
        total_parts_count = len(parts_list)

    if not parts_list:
        log("‚ÑπÔ∏è –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–µ–∫—Å—Ç –ø—É—Å—Ç –∏–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    for idx, single_part_content in enumerate(parts_list, 1):
        final_text_for_telegram = single_part_content
        log_part_prefix_display = "" 

        if add_numeration_if_multiple_parts and total_parts_count > 1:
            numeration_prefix_str = f"–ß–∞—Å—Ç—å {idx}/{total_parts_count}:\n\n"
            final_text_for_telegram = numeration_prefix_str + single_part_content
            log_part_prefix_display = f"–ß–∞—Å—Ç—å {idx}/{total_parts_count} " 
            
            final_text_bytes_with_prefix = len(final_text_for_telegram.encode('utf-8'))
            if final_text_bytes_with_prefix > 4096: 
                log(f"üìõ –í–ù–ò–ú–ê–ù–ò–ï! {log_part_prefix_display}–° –ü–†–ï–§–ò–ö–°–û–ú –°–õ–ò–®–ö–û–ú –î–õ–ò–ù–ù–ê–Ø ({final_text_bytes_with_prefix} –±–∞–π—Ç > 4096). Telegram –û–ë–†–ï–ñ–ï–¢ –≠–¢–£ –ß–ê–°–¢–¨!")

        def make_telegram_api_call():
            return requests.post(
                f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage",
                json={"chat_id": CHANNEL_ID, "text": final_text_for_telegram, "disable_web_page_preview": True},
                timeout=15 
            )

        response_from_tg = safe_call(make_telegram_api_call, label=f"‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {log_part_prefix_display}–≤ TG")
        
        current_part_final_bytes = len(final_text_for_telegram.encode('utf-8'))
        current_part_final_chars = len(final_text_for_telegram)

        if response_from_tg and response_from_tg.status_code == 200:
            log(f"‚úÖ {log_part_prefix_display}—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ({current_part_final_bytes} –±–∞–π—Ç, {current_part_final_chars} —Å–∏–º–≤–æ–ª–æ–≤)")
        elif response_from_tg:
            error_text_preview = final_text_for_telegram[:150].replace('\n', ' ') 
            log(f"‚ùó –û—à–∏–±–∫–∞ –æ—Ç Telegram –¥–ª—è {log_part_prefix_display.strip()}: {response_from_tg.status_code} - {response_from_tg.text}")
            log(f"   –¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —á–∞—Å—Ç–∏ (–±–∞–π—Ç—ã: {current_part_final_bytes}, —Å–∏–º–≤–æ–ª—ã: {current_part_final_chars}, –Ω–∞—á–∞–ª–æ): '{error_text_preview}...'")
        else: 
            error_text_preview = final_text_for_telegram[:150].replace('\n', ' ')
            log(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {log_part_prefix_display.strip()} (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Telegram –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫).")
            log(f"   –¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —á–∞—Å—Ç–∏ (–±–∞–π—Ç—ã: {current_part_final_bytes}, —Å–∏–º–≤–æ–ª—ã: {current_part_final_chars}, –Ω–∞—á–∞–ª–æ): '{error_text_preview}...'")

        if total_parts_count > 1 and idx < total_parts_count: 
            sleep_duration = 1.5 
            log(f"‚ÑπÔ∏è –ü–∞—É–∑–∞ {sleep_duration} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç—å—é...")
            sleep(sleep_duration)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ ---
def main():
    log("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω.")
    log(f"üîë OPENAI_KEY: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('OPENAI_KEY') else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!'}")
    log(f"üîë WHALE_KEY: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('WHALE_KEY') else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!'}")
    log(f"üîë MARKETAUX_KEY: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('MARKETAUX_KEY') else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!'}") # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª—é—á–∞

    try:
        # 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –ö–†–ò–ü–¢–ï (–≤—ã–≤–æ–¥—è—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏)
        log("üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º...")
        crypto_price_block = get_crypto_data(extended=True) # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ "‚Çø –ö—Ä–∏–ø—Ç–∞ –Ω–∞ –î–ê–¢–ê"
        fear_and_greed_block = get_fear_and_greed_index_text()
        derivatives_block = get_derivatives_block() # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ "‚öñÔ∏è –õ–æ–Ω–≥–∏ / –®–æ—Ä—Ç—ã"
        
        log("üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∏—Ç–æ–≤—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º...")
        whale_activity_block = get_whale_activity_summary()
        log("üêã –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∏—Ç–∞–º –ø–æ–ª—É—á–µ–Ω—ã.")

        # 2. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –§–û–ù–î–û–í–û–ú–£ –†–´–ù–ö–£ (–≤—ã–≤–æ–¥—è—Ç—Å—è –≤—Ç–æ—Ä—ã–º–∏)
        log("üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–æ–Ω–¥–æ–≤–æ–º—É —Ä—ã–Ω–∫—É...")
        market_data_block = get_market_data_text() # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ "üìä –ò–Ω–¥–µ–∫—Å—ã"

        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–û–ô —á–∞—Å—Ç–∏ –æ—Ç GPT
        # gpt_report() —Ç–µ–ø–µ—Ä—å —Å–∞–º–∞ —Ä–µ—à–∞–µ—Ç, –∫–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π
        log("üîÑ –í—ã–∑–æ–≤ GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞...")
        main_analytical_text_from_gpt = gpt_report()
        # –£–¥–∞–ª–µ–Ω–∏–µ Markdown
        main_analytical_text_from_gpt = re.sub(r"\*\*(.*?)\*\*", r"\1", main_analytical_text_from_gpt)
        main_analytical_text_from_gpt = re.sub(r"\_(.*?)\_", r"\1", main_analytical_text_from_gpt)
        main_analytical_text_from_gpt = re.sub(r"\`(.*?)\`", r"\1", main_analytical_text_from_gpt)
        main_analytical_text_from_gpt = re.sub(r"\#(.*?)\n", r"\1\n", main_analytical_text_from_gpt)
        log(f"üìù –ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å –æ—Ç GPT (–¥–ª–∏–Ω–∞ {len(main_analytical_text_from_gpt)}).")

        # 4. –°–±–æ—Ä–∫–∞ –í–°–ï–• –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—Ç—á–µ—Ç–∞ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        list_of_report_components = [
            # --- –ë–ª–æ–∫ –ö–†–ò–ü–¢–´ ---
            crypto_price_block,
            fear_and_greed_block,  # üëà –≤—Å—Ç–∞–≤–∫–∞ –±–ª–æ–∫–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
            derivatives_block, 
            whale_activity_block,
            

            # --- –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ---
            "______________________________", # <--- –¢–≤–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            # --- –ë–ª–æ–∫ –§–û–ù–î–û–í–û–ì–û –†–´–ù–ö–ê ---
            market_data_block, 

            # --- –ë–ª–æ–∫ –ê–ù–ê–õ–ò–¢–ò–ö–ò –æ—Ç GPT ---
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—Å–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º GPT
            f"ü§ñ –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–≤–æ–¥—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ GPT –Ω–∞ {date.today().strftime('%d.%m.%Y')}:",
            main_analytical_text_from_gpt,

            # –í —Ñ—É–Ω–∫—Ü–∏–∏ main() –≤ main.py, –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ list_of_report_components
            # ...
                # --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–µ–∫—Å—Ç—É GPT) ---
                keyword_alert(main_analytical_text_from_gpt),
                store_and_compare(main_analytical_text_from_gpt),
                # analyze_sentiment(main_analytical_text_from_gpt) # <-- –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô –ò–õ–ò –£–î–ê–õ–ò –≠–¢–£ –°–¢–†–û–ö–£
            # ... 
        ]
        
        # 5. –ß–∏—Å—Ç–∫–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
        valid_components = []
        for component in list_of_report_components:
            if isinstance(component, str) and component.strip():
                valid_components.append(component.strip())
            elif component is not None:
                log(f"‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—á–µ—Ç–∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞: {type(component)}. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω.")
                str_component = str(component).strip()
                if str_component:
                    valid_components.append(str_component)

        full_report_final_string = "\n\n".join(valid_components)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        now_eest = datetime.utcnow() + timedelta(hours=3)
        current_run_time_str = now_eest.strftime("%H:%M")
        run_log = f"‚è± –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–≤—Ä–µ–º—è –ø–æ –ö–∏–µ–≤—É: {current_run_time_str})"

        final_telegram_message = f"{run_log}\n\n‚ö°Ô∏è Momentum Pulse:\n\n{full_report_final_string}"

        # <<< –ù–ê–ß–ê–õ–û –ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø >>>
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TZ
            # –ù–∞ Railway –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TZ, –Ω–∞–ø—Ä–∏–º–µ—Ä, "Europe/Kiev"
            tz_name = os.getenv("TZ")
            if tz_name:
                user_timezone = timezone(pytz.timezone(tz_name).utcoffset(datetime.now()))
            else: # –§–æ–ª–ª–±—ç–∫ –Ω–∞ UTC+2, –µ—Å–ª–∏ TZ –Ω–µ –∑–∞–¥–∞–Ω
                user_timezone = timezone(timedelta(hours=2)) # –ü—Ä–∏–º–µ—Ä –¥–ª—è UTC+2

            current_time_in_zone = datetime.now(user_timezone).strftime("%H:%M (%Z)")
            data_update_signature = f"\n\n---\nüìÖ –î–∞–Ω–Ω—ã–µ –Ω–∞ ~ {date.today().strftime('%d.%m.%Y')}, –æ–±–Ω–æ–≤–ª–µ–Ω—ã –æ–∫–æ–ª–æ {current_time_in_zone}."
            final_telegram_message += data_update_signature
        except Exception as e:
            log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º: {e}")
            # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º—è –±–µ–∑ —è–≤–Ω–æ–π –∑–æ–Ω—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å TZ
            current_time_simple = datetime.now().strftime("%H:%M")
            data_update_signature = f"\n\n---\nüìÖ –î–∞–Ω–Ω—ã–µ –Ω–∞ ~ {date.today().strftime('%d.%m.%Y')}, –æ–±–Ω–æ–≤–ª–µ–Ω—ã –æ–∫–æ–ª–æ {current_time_simple}."
            final_telegram_message += data_update_signature
        # <<< –ö–û–ù–ï–¶ –ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø >>>
        log(f"üìÑ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ–±—Ä–∞–Ω (–¥–ª–∏–Ω–∞ {len(final_telegram_message)}). –ù–∞—á–∞–ª–æ: {final_telegram_message[:200]}")

        # 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        if final_telegram_message.strip() and final_telegram_message.strip() != "‚ö°Ô∏è DawnMarket Pulse:":
            log(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram (TG_LIMIT_BYTES={TG_LIMIT_BYTES})...")
            send(final_telegram_message, add_numeration_if_multiple_parts=True)
            log("‚úÖ –í–µ—Å—å –æ—Ç—á—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            log("‚ÑπÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø—É—Å—Ç –∏–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∏–ª–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞), –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

        sleep(3)
        log("‚è≥ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –ø–∞—É–∑—ã.")

    except RuntimeError as e:
        log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GPT-–æ—Ç—á–µ—Ç–∞: {e}")
        sys.exit(1)
    except requests.exceptions.RequestException as e:
        log(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
        log(traceback.format_exc())
        sys.exit(1)
    except Exception as e:
        log(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        log(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()