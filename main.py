#!/usr/bin/env python3
import os
import sys
import requests
import openai
from datetime import datetime, timezone, date
from textwrap import wrap
from time import sleep
import traceback

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_KEY")
TG_TOKEN       = os.getenv("TG_TOKEN")
CHANNEL_ID     = os.getenv("CHANNEL_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –∏ Telegram
MODEL       = "gpt-4o-mini"
TIMEOUT     = 60
TG_LIMIT    = 4096      # –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ Telegram
GPT_TOKENS  = 400       # –ü—Ä–∏–º–µ—Ä–Ω–æ 1600‚Äì1800 —Å–∏–º–≤–æ–ª–æ–≤

# –ü—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ GPT –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
PROMPT = """
üìà –£—Ç—Ä–µ–Ω–Ω–∏–π –æ–±–∑–æ—Ä ‚Ä¢ {date}

–ò–Ω–¥–µ–∫—Å—ã üìä
‚Ä¢ S&P 500, DAX, Nikkei, Nasdaq fut
‚Üí –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞?

–ê–∫—Ü–∏–∏-–ª–∏–¥–µ—Ä—ã üöÄ / –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã üìâ
‚Ä¢ –ø–æ 2‚Äì3 –±—É–º–∞–≥–∏ + –ø—Ä–∏—á–∏–Ω–∞
‚Üí –í—ã–≤–æ–¥.

–ö—Ä–∏–ø—Ç–∞ ‚Çø
‚Ä¢ BTC, ETH + 3 –∞–ª—å—Ç–∫–æ–∏–Ω–∞
‚Üí –í—ã–≤–æ–¥.

–ú–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏ üì∞
‚Ä¢ 3 –≥–ª–∞–≤–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞ + –≤–ª–∏—è–Ω–∏–µ

–¶–∏—Ç–∞—Ç—ã –¥–Ω—è üó£
‚Ä¢ –¥–æ 2 —Ü–∏—Ç–∞—Ç + —Å–º—ã—Å–ª

–ß–∏—Å–ª–æ-—Ñ–∞–∫—Ç ü§î

‚ö°Ô∏è –ò–¥–µ—è –¥–Ω—è ‚Äì 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è actionable-—Å–æ–≤–µ—Ç–∞.

‚ÄºÔ∏è –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ HTML. –ú–∞–∫—Å–∏–º—É–º 1 600 —Å–∏–º–≤–æ–ª–æ–≤.
"""

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –ø–∏—à–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –¥—É–±–ª–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
def log(msg):
    timestamp = f"[{datetime.now(timezone.utc):%Y-%m-%d %H:%M:%S} UTC]"
    print(f"{timestamp} {msg}", flush=True)
    if TG_TOKEN and CHANNEL_ID:
        try:
            requests.post(
                f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage",
                json={"chat_id": CHANNEL_ID, "text": f"üõ† {msg}"},
                timeout=5
            )
        except Exception as e:
            print(f"{timestamp} ‚ùó –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º: {e}", flush=True)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ GPT
def gpt_report():
    r = openai.ChatCompletion.create(
        model=MODEL,
        messages=[{"role": "user", "content": PROMPT.format(date=date.today())}],
        timeout=TIMEOUT,
        temperature=0.4,
        max_tokens=GPT_TOKENS,
    )
    return r.choices[0].message.content.strip()

# –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram
def chunk(text, limit=TG_LIMIT):
    parts = wrap(text, width=limit-20, break_long_words=False, break_on_hyphens=False)
    total = len(parts)
    return [f"({i+1}/{total})\n{p}" if total > 1 else p for i, p in enumerate(parts)]

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram
def send(text):
    for part in chunk(text):
        r = requests.post(
            f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage",
            json={"chat_id": CHANNEL_ID, "text": part, "disable_web_page_preview": True},
            timeout=10
        )
        if r.status_code != 200:
            log(f"‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ TG: {r.status_code}: {r.text}")
        sleep(1)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
def main():
    log("–°–∫—Ä–∏–ø—Ç Railway –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∑–∞–ø—É—â–µ–Ω.")
    try:
        report = gpt_report()
        send(report)
        log("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        log(traceback.format_exc())
        sys.exit(1)

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    main()


