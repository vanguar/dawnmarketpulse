#!/usr/bin/env python3
import nltk
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger')

import os
import sys
import requests
import openai
from datetime import datetime, timezone, date
from time import sleep
import traceback
import re

from market_reader import get_market_data_text, get_crypto_data
from news_reader import get_news_block
from analyzer import keyword_alert, store_and_compare
from report_utils import analyze_sentiment

openai.api_key = os.getenv("OPENAI_KEY")
TG_TOKEN = os.getenv("TG_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

MODEL       = "gpt-4o-mini"
TIMEOUT     = 60
TG_LIMIT    = 4096
GPT_TOKENS  = 400

GPT_CONTINUATION = """–ê–∫—Ü–∏–∏-–ª–∏–¥–µ—Ä—ã üöÄ / –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã üìâ
- –ø–æ 2‚Äì3 –±—É–º–∞–≥–∏ + –ø—Ä–∏—á–∏–Ω–∞
‚Üí –í—ã–≤–æ–¥.

–ú–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏ üì∞
- 3 –≥–ª–∞–≤–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞ + –≤–ª–∏—è–Ω–∏–µ

–¶–∏—Ç–∞—Ç—ã –¥–Ω—è üó£
- –¥–æ 2 —Ü–∏—Ç–∞—Ç + —Å–º—ã—Å–ª

–ß–∏—Å–ª–æ-—Ñ–∞–∫—Ç ü§î

‚ö°Ô∏è –ò–¥–µ—è –¥–Ω—è ‚Äì 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è actionable-—Å–æ–≤–µ—Ç–∞.

‚ÄºÔ∏è –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ HTML.
‚ÄºÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –î–í–û–ô–ù–´–ú–ò –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏.
‚ÄºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤."""


def log(msg):
    timestamp = f"[{datetime.now(timezone.utc):%Y-%m-%d %H:%M:%S} UTC]"
    print(f"{timestamp} {msg}", flush=True)

def safe_call(func, retries=3, delay=5, label="‚ùó –û—à–∏–±–∫–∞"):
    for i in range(retries):
        try:
            return func()
        except Exception as e:
            log(f"{label}: –ø–æ–ø—ã—Ç–∫–∞ {i + 1}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if i < retries - 1:
                sleep(delay)
    log(f"{label}: –≤—Å–µ {retries} –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.")
    return None

def gpt_report():
    today = date.today().strftime("%d.%m.%Y")
    header = f"üìÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ {today}"
    dynamic_data = (
        header + "\n\n" +
        get_market_data_text() + "\n\n" +
        get_crypto_data(extended=True) + "\n\n" +
        get_news_block() + "\n\n" +
        GPT_CONTINUATION
    )
    response = safe_call(
        lambda: openai.ChatCompletion.create(
            model=MODEL,
            messages=[{"role": "user", "content": dynamic_data}],
            timeout=TIMEOUT,
            temperature=0.4,
            max_tokens=GPT_TOKENS,
        ),
        label="‚ùó –û—à–∏–±–∫–∞ OpenAI"
    )
    if not response:
        raise RuntimeError("OpenAI –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.")
    return response.choices[0].message.content.strip()

def prepare_text(text):
    for marker in ["üìä", "üöÄ", "üìâ", "‚Çø", "üì∞", "üó£", "ü§î", "‚ö°Ô∏è"]:
        text = re.sub(f"({marker}[^\n]+)\n", f"\1\n\n", text)
    text = re.sub(r"\n‚Üí", "\n\n‚Üí", text)
    while "\n\n\n" in text:
        text = text.replace("\n\n\n", "\n\n")
    return text

def chunk(text, limit=TG_LIMIT):
    paragraphs = text.split("\n\n")
    chunks = []
    current = ""
    for para in paragraphs:
        if len(current) + len(para) + 2 <= limit:
            current += (para + "\n\n")
        else:
            chunks.append(current.strip())
            current = para + "\n\n"
    if current:
        chunks.append(current.strip())
    return chunks

def send(text):
    text = prepare_text(text)
    for part in chunk(text):
        def send_part():
            return requests.post(
                f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage",
                json={"chat_id": CHANNEL_ID, "text": part, "disable_web_page_preview": True},
                timeout=10
            )

        response = safe_call(send_part, label="‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ TG")
        if response and response.status_code == 200:
            log(f"‚úÖ –ß–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ({len(part)} —Å–∏–º–≤–æ–ª–æ–≤)")
        elif response:
            log(f"‚ùó –û—à–∏–±–∫–∞ –æ—Ç Telegram: {response.status_code}: {response.text}")
        sleep(1)

def main():
    log("üöÄ Railway –∑–∞–ø—É—Å—Ç–∏–ª —Å–∫—Ä–∏–ø—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
    try:
        report = gpt_report()
        log(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç—á—ë—Ç ({len(report)} —Å–∏–º–≤–æ–ª–æ–≤)")
        send(report)
        send(keyword_alert(report))
        send(store_and_compare(report))
        send(analyze_sentiment(report))
        log("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        log(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()

