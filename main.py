#!/usr/bin/env python3
import os, sys, requests, openai
from datetime import datetime, timezone, date
from time import sleep

openai.api_key = os.getenv("OPENAI_KEY")
TG_TOKEN       = os.getenv("TG_TOKEN")
CHANNEL_ID     = os.getenv("CHANNEL_ID")

MODEL       = "gpt-4o-mini"
TIMEOUT     = 60
MAX_TOKENS  = 450            # ‚âà 1900‚Äì2000 —Å–∏–º–≤–æ–ª–æ–≤
TG_LIMIT    = 4096           # –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞

PROMPT = """
üìà –£—Ç—Ä–µ–Ω–Ω–∏–π –æ–±–∑–æ—Ä ‚Ä¢ {date}

–ò–Ω–¥–µ–∫—Å—ã üìä
‚Ä¢ S&P 500, DAX, Nikkei, Nasdaq fut
‚Üí –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞?

–ê–∫—Ü–∏–∏-–ª–∏–¥–µ—Ä—ã üöÄ / –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã üìâ
‚Ä¢ –ø–æ 2‚Äì3 –±—É–º–∞–≥–∏ + –ø—Ä–∏—á–∏–Ω–∞
‚Üí –í—ã–≤–æ–¥.

–ö—Ä–∏–ø—Ç–∞ ‚Çø
‚Ä¢ BTC, ETH + 3 –∞–ª—å—Ç–∫–æ–∏–Ω–∞ (—Ü–µ–Ω–∞ –∏ %)
‚Üí –ö–æ—Ä–æ—Ç–∫–∏–π –≤—ã–≤–æ–¥.

–ú–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏ üì∞
‚Ä¢ 3 –∑–∞–≥–æ–ª–æ–≤–∫–∞ + –≤–ª–∏—è–Ω–∏–µ

–¶–∏—Ç–∞—Ç—ã –¥–Ω—è üó£
‚Ä¢ –¥–æ 3 —Ü–∏—Ç–∞—Ç + —Å–º—ã—Å–ª

–ß–∏—Å–ª–æ-—Ñ–∞–∫—Ç ü§î

‚ö°Ô∏è –ò–¥–µ—è –¥–Ω—è
‚Ä¢ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è actionable-—Å–æ–≤–µ—Ç–∞.

–¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ HTML/Markdown). –û–±—ä—ë–º ~2000 —Å–∏–º–≤–æ–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º.
"""

def log(msg):
    ts = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')
    print(f"[{ts}] {msg}", flush=True)

def get_report():
    prompt = PROMPT.format(date=date.today().isoformat())
    r = openai.ChatCompletion.create(
        model=MODEL,
        messages=[{"role": "user", "content": prompt}],
        timeout=TIMEOUT,
        temperature=0.4,
        max_tokens=MAX_TOKENS,
    )
    return r.choices[0].message.content.strip()

def split_long(text: str):
    """–†–µ–∂–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –∫—É—Å–æ–∫ ‚â§ TG_LIMIT."""
    if len(text) <= TG_LIMIT:
        return [text]
    parts, chunk, length = [], [], 0
    for p in text.split("\n\n"):
        p += "\n\n"
        if length + len(p) > TG_LIMIT:
            parts.append(''.join(chunk).rstrip())
            chunk, length = [], 0
        chunk.append(p)
        length += len(p)
    if chunk:
        parts.append(''.join(chunk).rstrip())
    # –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã (1/3)
    total = len(parts)
    return [f"({i+1}/{total})\n{part}" for i, part in enumerate(parts)]

def post_to_tg(text: str):
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    for part in split_long(text):
        r = requests.post(url, json={
            "chat_id": CHANNEL_ID,
            "text": part,
            "disable_web_page_preview": True
        }, timeout=10)
        if r.status_code != 200:
            log(f"Telegram error {r.status_code}: {r.text}")
        sleep(1)

def main():
    try:
        post_to_tg(get_report())
        log("Posted OK.")
    except Exception as e:
        log(f"Fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()


