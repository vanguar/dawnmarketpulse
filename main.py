#!/usr/bin/env python3
import os
import sys
import requests
import openai
from datetime import datetime, timezone, date
# textwrap –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞–∑–±–∏–≤–∫–∏, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π
# from textwrap import wrap 
from time import sleep

# ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
openai.api_key = os.getenv("OPENAI_KEY")
TG_TOKEN = os.getenv("TG_TOKEN")
CHAT_ID = os.getenv("CHANNEL_ID")

MODEL = "gpt-4o-mini"
TIMEOUT = 60
GPT_TOKENS = 450
TG_LIMIT_BYTES = 4096  # –õ–∏–º–∏—Ç Telegram –≤ –±–∞–π—Ç–∞—Ö

# –ó–∞–ø–∞—Å –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Ç–∏–ø–∞ "(NN/MM)\n" –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.
# (99/99)\n —ç—Ç–æ 9 —Å–∏–º–≤–æ–ª–æ–≤ ASCII = 9 –±–∞–π—Ç. –í–æ–∑—å–º–µ–º —Å –∑–∞–ø–∞—Å–æ–º.
PREFIX_MAX_BYTES = 25
# –ù–∞—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–∫–æ –º—ã —Ö–æ—Ç–∏–º –ø–æ–¥–æ–π—Ç–∏ –∫ –ª–∏–º–∏—Ç—É TG_LIMIT_BYTES —Å –∫–∞–∂–¥–æ–π —á–∞—Å—Ç—å—é.
# –û—Å—Ç–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
CHUNK_TARGET_BYTES = TG_LIMIT_BYTES - PREFIX_MAX_BYTES - 50 # 50 –±–∞–π—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞

# ‚îÄ‚îÄ PROMPT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PROMPT = """
üóìÔ∏è **–£—Ç—Ä–µ–Ω–Ω–∏–π –æ–±–∑–æ—Ä ‚Ä¢ {date}** ‚òÄÔ∏è

---

üìä **–°–∏—Ç—É–∞—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–∞—Ö:**

* –ò–Ω–¥–µ–∫—Å—ã (S&P 500, DAX, Nikkei, Nasdaq fut):
    * _–û—Å–Ω–æ–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏._
    * ‚û°Ô∏è _–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞? –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑._

---

üöÄ **–ê–∫—Ü–∏–∏: –í–∑–ª–µ—Ç—ã –∏ –ü–∞–¥–µ–Ω–∏—è** üìâ

* –õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ (2-3 –±—É–º–∞–≥–∏):
    * _–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ç–∏–∫–µ—Ä): –ø—Ä–∏—á–∏–Ω–∞ —Ä–æ—Å—Ç–∞ (–Ω–æ–≤–æ—Å—Ç—å, –æ—Ç—á–µ—Ç, –∏ —Ç.–¥.)._
* –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã (2-3 –±—É–º–∞–≥–∏):
    * _–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ç–∏–∫–µ—Ä): –ø—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è._
* ‚û°Ô∏è _–û–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –∞–∫—Ü–∏–π._

---

‚Çø **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: –û–±–∑–æ—Ä** üíé

* –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (BTC, ETH):
    * _–î–∏–Ω–∞–º–∏–∫–∞, –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏._
* –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã (–¥–æ 3):
    * _–ù–∞–∑–≤–∞–Ω–∏–µ: –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞, –ø—Ä–∏—á–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞._
* ‚û°Ô∏è _–í—ã–≤–æ–¥ –ø–æ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫—É._

---

üì∞ **–ì–ª–∞–≤–Ω—ã–µ –º–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏:**

* _(–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1): –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ._
* _(–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2): –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ._
* _(–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3): –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ._

---

üó£Ô∏è **–¶–∏—Ç–∞—Ç—ã –¥–Ω—è:**

* _"–¶–∏—Ç–∞—Ç–∞ 1"_ - _–ê–≤—Ç–æ—Ä/–ò—Å—Ç–æ—á–Ω–∏–∫. (–ö—Ä–∞—Ç–∫–∏–π —Å–º—ã—Å–ª –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç)._
* _"–¶–∏—Ç–∞—Ç–∞ 2"_ - _–ê–≤—Ç–æ—Ä/–ò—Å—Ç–æ—á–Ω–∏–∫. (–ö—Ä–∞—Ç–∫–∏–π —Å–º—ã—Å–ª –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç)._ (–ï—Å–ª–∏ –µ—Å—Ç—å)

---

ü§î **–ß–∏—Å–ª–æ / –§–∞–∫—Ç –¥–Ω—è:**

* _–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ñ–∞–∫—Ç/—á–∏—Å–ª–æ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ._

---

üí° **–ò–¥–µ—è –¥–Ω—è / Actionable —Å–æ–≤–µ—Ç:**

* ‚ö°Ô∏è _–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –∏–¥–µ—è –Ω–∞ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è/–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è._

---
‚ÄºÔ∏è **–í–ê–ñ–ù–ï–ô–®–ï–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï –ö –§–û–†–ú–ê–¢–£ –û–¢–í–ï–¢–ê:**
1.  **–¢–û–õ–¨–ö–û –û–ë–´–ß–ù–´–ô –¢–ï–ö–°–¢.**
2.  **–ó–ê–ü–†–ï–©–ï–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ HTML, MARKDOWN –∏–ª–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏.**
3.  **–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ó–í–ï–ó–î–û–ß–ö–ò (`*`) –∏–ª–∏ –ü–û–î–ß–ï–†–ö–ò–í–ê–ù–ò–Ø (`_`) –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤) –∏–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤.**
4.  –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å–ø–∏—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –¥–µ—Ñ–∏—Å—ã (`- `) –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∞–±–∑–∞—Ü–µ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `‚Ä¢ `), –Ω–æ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–æ–∫—Ä—É–≥ –Ω–∏—Ö –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã.
5.  –≠–º–æ–¥–∑–∏ –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∞—Å—Ç—å—é –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
6.  –û–±—â–∏–π –æ–±—ä–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ–±—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 1600-1800 —Å–∏–º–≤–æ–ª–æ–≤.
"""

TG_URL = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"

def log(msg: str) -> None:
    print(f"[{datetime.now(timezone.utc):%Y-%m-%d %H:%M:%S %Z}] {msg}", flush=True)

def gpt_report() -> str:
    try:
        # –í–∞–∂–Ω–æ: –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ openai==0.28.1. API –¥–ª—è –≤–µ—Ä—Å–∏–π openai>=1.0.0 –¥—Ä—É–≥–æ–π.
        # –≠—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –≤–∞—à–µ–π —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏.
        resp = openai.ChatCompletion.create(
            model=MODEL,
            messages=[{"role": "user", "content": PROMPT.format(date=date.today().strftime("%d.%m.%Y"))}],
            timeout=TIMEOUT,
            temperature=0.4,
            max_tokens=GPT_TOKENS,
        )
        generated_text = resp.choices[0].message.content.strip()
        log(f"GPT generated text length: {len(generated_text)} chars, {len(generated_text.encode('utf-8'))} bytes")
        return generated_text
    except openai.error.OpenAIError as e:
        log(f"OpenAI API Error: {e}")
        raise
    except Exception as e:
        log(f"Error in gpt_report: {e}")
        raise

def chunk_text_by_bytes(text: str, target_chunk_bytes: int) -> list[str]:
    log(f"Chunking text by bytes. Original: {len(text)} chars, {len(text.encode('utf-8'))} bytes. Target per chunk: {target_chunk_bytes} bytes.")
    if not text.strip():
        return []

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º splitlines() –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞–ª GPT
    # –≠—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞, –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–±–∑–∞—Ü–µ–≤
    lines = text.splitlines(keepends=True) 
    if not lines: # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
        lines = [text]

    all_parts_text = []
    current_part_lines = []
    current_part_bytes = 0

    for line in lines:
        line_bytes = len(line.encode('utf-8'))
        if line_bytes == 0 and not line.strip(): # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            continue

        if current_part_bytes + line_bytes <= target_chunk_bytes:
            current_part_lines.append(line)
            current_part_bytes += line_bytes
        else:
            # –¢–µ–∫—É—â–∞—è —á–∞—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
            if current_part_lines: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
                all_parts_text.append("".join(current_part_lines).strip())
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
            # –ï—Å–ª–∏ —Å–∞–º–∞ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞, –µ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            # (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –µ–µ, –≤ –Ω–∞–¥–µ–∂–¥–µ —á—Ç–æ —Ç–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–¥–Ω–∞ –∏ –æ–Ω–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è)
            # –í –∏–¥–µ–∞–ª–µ, –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –¥–µ–ª–∏—Ç—å –∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç –∫–æ–¥.
            current_part_lines = [line]
            current_part_bytes = line_bytes
            if line_bytes > target_chunk_bytes:
                log(f"WARNING: Single line is longer than target_chunk_bytes! Line length: {line_bytes} bytes. This might still be too long for Telegram.")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
    if current_part_lines:
        all_parts_text.append("".join(current_part_lines).strip())
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ strip()
    all_parts_text = [part for part in all_parts_text if part]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã (N/M)
    final_chunks_with_prefix = []
    total_final_parts = len(all_parts_text)
    if total_final_parts == 0:
        return []
    if total_final_parts == 1:
        return all_parts_text # –ü—Ä–µ—Ñ–∏–∫—Å –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏

    for i, part_text in enumerate(all_parts_text):
        prefix = f"({i+1}/{total_final_parts})\n"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ —á–∞—Å—Ç—å –° –ü–†–ï–§–ò–ö–°–û–ú –æ–±—â–∏–π –ª–∏–º–∏—Ç Telegram
        # –≠—Ç–æ —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
        if len((prefix + part_text).encode('utf-8')) > TG_LIMIT_BYTES:
            log(f"CRITICAL ERROR in chunking: Part {i+1}/{total_final_parts} WITH prefix is TOO LONG: {len((prefix + part_text).encode('utf-8'))} bytes. Text of part (first 100 chars): '{part_text[:100]}'")
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —É–º–Ω–∞—è –ª–æ–≥–∏–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç—É —á–∞—Å—Ç—å –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –µ—â–µ —Ä–∞–∑
            # –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å CHUNK_TARGET_BYTES –µ—â–µ —Å–∏–ª—å–Ω–µ–µ.
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º —Ç–∞–∫—É—é "—Å–ª–æ–º–∞–Ω–Ω—É—é" —á–∞—Å—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ Telegram.
            # –í –∏–¥–µ–∞–ª–µ, —Ç–∞–∫–æ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ, –µ—Å–ª–∏ CHUNK_TARGET_BYTES –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
            continue 
        final_chunks_with_prefix.append(prefix + part_text)
        
    log(f"Text chunked into {len(final_chunks_with_prefix)} parts by bytes.")
    return final_chunks_with_prefix


def send(part_text: str):
    if not part_text or part_text.isspace(): # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        log("Attempted to send an empty or whitespace-only part. Skipping.")
        return

    char_len = len(part_text)
    byte_len = len(part_text.encode('utf-8'))
    log(f"Sending part: {char_len} chars, {byte_len} bytes. (TG Limit: {TG_LIMIT_BYTES} bytes)")

    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ–π, –µ—Å–ª–∏ chunk_text_by_bytes —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if byte_len > TG_LIMIT_BYTES:
        log(f"EMERGENCY FAILSAFE: Part is too long in bytes JUST BEFORE SENDING! {byte_len} > {TG_LIMIT_BYTES}. This indicates a flaw in chunk_text_by_bytes or prefix addition.")
        # –ù–µ –±—É–¥–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –æ–±—Ä–µ–∑–∞—Ç—å –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã.
        # –õ—É—á—à–µ –ø—É—Å—Ç—å Telegram –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –º—ã —ç—Ç–æ —É–≤–∏–¥–µ–ª–∏.

    json_payload = {
        "chat_id": CHAT_ID,
        "text": part_text,
        "disable_web_page_preview": True
    }
    try:
        r = requests.post(TG_URL, json=json_payload, timeout=20)
        r.raise_for_status()
        log(f"Part sent successfully to {CHAT_ID}.")
    except requests.exceptions.HTTPError as e:
        log(f"TG HTTP Error {r.status_code} for {CHAT_ID}: {r.text}. Error: {e}")
        if r.status_code == 400 and "message is too long" in r.text.lower():
            log("CRITICAL: TELEGRAM API REPORTS 'MESSAGE IS TOO LONG'.")
            log(f"Failed part text (first 200 chars): '{part_text[:200]}...'")
            log(f"Failed part actual byte length: {byte_len}")
    except requests.exceptions.RequestException as e:
        log(f"TG Request Error for {CHAT_ID}: {e}")
    except Exception as e:
        log(f"Generic error in send function for {CHAT_ID}: {e}")

def main():
    log("Script started. Attempting to generate and send report...")
    try:
        report_text = gpt_report()
        if not report_text or report_text.isspace():
            log("GPT returned an empty or whitespace-only report. Exiting.")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ –±–∞–π—Ç–∞–º
        segments = chunk_text_by_bytes(report_text, CHUNK_TARGET_BYTES)
        
        if not segments: # segments –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
            log("Chunking resulted in no valid segments. Exiting.")
            return

        log(f"Report chunked into {len(segments)} segment(s).")

        for i, seg_text in enumerate(segments):
            log(f"Processing segment {i+1}/{len(segments)}...")
            send(seg_text)
            if i < len(segments) - 1:
                sleep(2)
        log("All segments processed. Posted OK.")
    except openai.error.OpenAIError as e:
        log(f"Fatal OpenAI API Error: {e}")
        sys.exit(1)
    except requests.exceptions.RequestException as e:
        log(f"Fatal Telegram API Request Error: {e}")
        sys.exit(1)
    except Exception as e:
        log(f"Fatal error in main execution: {e}")
        import traceback
        log(f"Traceback: {traceback.format_exc()}")
        sys.exit(1)

if __name__ == "__main__":
    main()
