#!/usr/bin/env python3
import os, sys, requests, openai
from datetime import datetime, timezone, date

openai.api_key = os.getenv("OPENAI_KEY")
TG_TOKEN  = os.getenv("TG_TOKEN")
CHAT_ID   = os.getenv("CHANNEL_ID")   # @name –∏–ª–∏ -100‚Ä¶

MODEL      = "gpt-4o-mini"
TIMEOUT    = 60
GPT_TOKENS = 450          # ‚âà 1800-2000 —Å–∏–º–≤–æ–ª–æ–≤
CUT_LEN    = 3500         # –Ω–∞–¥—ë–∂–Ω–æ < 4096

PROMPT = f"""
üìà –£—Ç—Ä–µ–Ω–Ω–∏–π –æ–±–∑–æ—Ä ‚Ä¢ {{date}}

–ò–Ω–¥–µ–∫—Å—ã üìä
‚Ä¢ S&P 500, DAX, Nikkei, Nasdaq fut
‚Üí –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞?

–ê–∫—Ü–∏–∏-–ª–∏–¥–µ—Ä—ã üöÄ / –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã üìâ
‚Ä¢ –ø–æ 2‚Äì3 –±—É–º–∞–≥–∏ + –ø—Ä–∏—á–∏–Ω–∞ ‚Üí –≤—ã–≤–æ–¥

–ö—Ä–∏–ø—Ç–∞ ‚Çø
‚Ä¢ BTC, ETH + 3 –∞–ª—å—Ç–∫–æ–∏–Ω–∞ ‚Üí –≤—ã–≤–æ–¥

–ú–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏ üì∞
‚Ä¢ 3 –∑–∞–≥–æ–ª–æ–≤–∫–∞ + –≤–ª–∏—è–Ω–∏–µ

–¶–∏—Ç–∞—Ç—ã –¥–Ω—è üó£
‚Ä¢ –¥–æ 2 —Ü–∏—Ç–∞—Ç + —Å–º—ã—Å–ª

–ß–∏—Å–ª–æ-—Ñ–∞–∫—Ç ü§î

‚ö°Ô∏è –ò–¥–µ—è –¥–Ω—è ‚Äî 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞

‚ÄºÔ∏è –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ HTML/Markdown. ‚â§ 2 000 —Å–∏–º–≤–æ–ª–æ–≤.
"""

TG_URL = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"

def log(msg):
    print(f"[{datetime.now(timezone.utc):%Y-%m-%d %H:%M:%S}] {msg}", flush=True)

def gpt():
    txt = openai.ChatCompletion.create(
        model=MODEL,
        messages=[{"role": "user", "content": PROMPT.format(date=date.today())}],
        timeout=TIMEOUT,
        temperature=0.4,
        max_tokens=GPT_TOKENS).choices[0].message.content.strip()
    return txt

def chunks(text, size=CUT_LEN):
    parts = [text[i:i+size] for i in range(0, len(text), size)]
    if len(parts) == 1:                      # –≤—Å—ë –≤–ª–µ–∑–ª–æ
        return parts
    total = len(parts)
    return [f"({n+1}/{total})\n{p}" for n, p in enumerate(parts)]

def send(msg):
    r = requests.post(TG_URL, json={
        "chat_id": CHAT_ID,
        "text": msg,
        "disable_web_page_preview": True})
    if r.status_code != 200:
        log(f"TG {r.status_code}: {r.text}")

def main():
    try:
        for part in chunks(gpt()):
            send(part)
        log("Posted OK.")
    except Exception as e:
        log(f"Fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()



