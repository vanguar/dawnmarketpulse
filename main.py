#!/usr/bin/env python3
import os
import sys
import requests
import openai
from datetime import datetime, timezone, date
from textwrap import wrap
from time import sleep

# ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
openai.api_key = os.getenv("OPENAI_KEY")
TG_TOKEN = os.getenv("TG_TOKEN")
CHAT_ID = os.getenv("CHANNEL_ID")

MODEL = "gpt-4o-mini"
TIMEOUT = 60
GPT_TOKENS = 450  # ~1700-1900 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–æ–ª–∂–Ω–∞ —Å—Ç–∞—Ä–∞—Ç—å—Å—è —É–ª–æ–∂–∏—Ç—å—Å—è –≤ —ç—Ç–æ
TG_LIMIT_BYTES = 4096  # –õ–∏–º–∏—Ç Telegram –≤ –±–∞–π—Ç–∞—Ö

# –£–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ –æ–±—Ä–µ–∑–∞–ª–æ—Å—å
# –ë—É–¥–µ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–∞–π—Ç—ã, –Ω–æ textwrap —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–µ–Ω –±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
# –ü—Ä–∏–º–µ—Ä–Ω–æ 2500 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã —Å —É—á–µ—Ç–æ–º –º–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç –±–∞–π—Ç
TARGET_CHAR_LEN_FOR_CHUNK = 2500

# ‚îÄ‚îÄ PROMPT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PROMPT = """
üóìÔ∏è **–£—Ç—Ä–µ–Ω–Ω–∏–π –æ–±–∑–æ—Ä ‚Ä¢ {date}** ‚òÄÔ∏è

---

üìä **–°–∏—Ç—É–∞—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–∞—Ö:**

* –ò–Ω–¥–µ–∫—Å—ã (S&P 500, DAX, Nikkei, Nasdaq fut):
    * _–û—Å–Ω–æ–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏._
    * ‚û°Ô∏è _–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞? –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑._

---

üöÄ **–ê–∫—Ü–∏–∏: –í–∑–ª–µ—Ç—ã –∏ –ü–∞–¥–µ–Ω–∏—è** üìâ

* –õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ (2-3 –±—É–º–∞–≥–∏):
    * _–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ç–∏–∫–µ—Ä): –ø—Ä–∏—á–∏–Ω–∞ —Ä–æ—Å—Ç–∞ (–Ω–æ–≤–æ—Å—Ç—å, –æ—Ç—á–µ—Ç, –∏ —Ç.–¥.)._
* –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã (2-3 –±—É–º–∞–≥–∏):
    * _–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ç–∏–∫–µ—Ä): –ø—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è._
* ‚û°Ô∏è _–û–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –∞–∫—Ü–∏–π._

---

‚Çø **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: –û–±–∑–æ—Ä** üíé

* –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (BTC, ETH):
    * _–î–∏–Ω–∞–º–∏–∫–∞, –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏._
* –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã (–¥–æ 3):
    * _–ù–∞–∑–≤–∞–Ω–∏–µ: –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞, –ø—Ä–∏—á–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞._
* ‚û°Ô∏è _–í—ã–≤–æ–¥ –ø–æ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫—É._

---

üì∞ **–ì–ª–∞–≤–Ω—ã–µ –º–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏:**

* _(–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1): –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ._
* _(–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2): –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ._
* _(–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3): –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ._

---

üó£Ô∏è **–¶–∏—Ç–∞—Ç—ã –¥–Ω—è:**

* _"–¶–∏—Ç–∞—Ç–∞ 1"_ - _–ê–≤—Ç–æ—Ä/–ò—Å—Ç–æ—á–Ω–∏–∫. (–ö—Ä–∞—Ç–∫–∏–π —Å–º—ã—Å–ª –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç)._
* _"–¶–∏—Ç–∞—Ç–∞ 2"_ - _–ê–≤—Ç–æ—Ä/–ò—Å—Ç–æ—á–Ω–∏–∫. (–ö—Ä–∞—Ç–∫–∏–π —Å–º—ã—Å–ª –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç)._ (–ï—Å–ª–∏ –µ—Å—Ç—å)

---

ü§î **–ß–∏—Å–ª–æ / –§–∞–∫—Ç –¥–Ω—è:**

* _–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ñ–∞–∫—Ç/—á–∏—Å–ª–æ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ._

---

üí° **–ò–¥–µ—è –¥–Ω—è / Actionable —Å–æ–≤–µ—Ç:**

* ‚ö°Ô∏è _–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –∏–¥–µ—è –Ω–∞ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è/–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è._

---
‚ÄºÔ∏è **–í–ê–ñ–ù–ï–ô–®–ï–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï –ö –§–û–†–ú–ê–¢–£ –û–¢–í–ï–¢–ê:**
1.  **–¢–û–õ–¨–ö–û –û–ë–´–ß–ù–´–ô –¢–ï–ö–°–¢.**
2.  **–ó–ê–ü–†–ï–©–ï–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ HTML, MARKDOWN –∏–ª–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏.**
3.  **–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ó–í–ï–ó–î–û–ß–ö–ò (`*`) –∏–ª–∏ –ü–û–î–ß–ï–†–ö–ò–í–ê–ù–ò–Ø (`_`) –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤) –∏–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤.**
4.  –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å–ø–∏—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –¥–µ—Ñ–∏—Å—ã (`- `) –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∞–±–∑–∞—Ü–µ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `‚Ä¢ `), –Ω–æ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–æ–∫—Ä—É–≥ –Ω–∏—Ö –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã.
5.  –≠–º–æ–¥–∑–∏ –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∞—Å—Ç—å—é –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
6.  –û–±—â–∏–π –æ–±—ä–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ–±—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 1600-1800 —Å–∏–º–≤–æ–ª–æ–≤.
"""

TG_URL = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"

def log(msg: str) -> None:
    print(f"[{datetime.now(timezone.utc):%Y-%m-%d %H:%M:%S %Z}] {msg}", flush=True)

def clean_text_from_potential_markdown(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö Markdown-–ø–æ–¥–æ–±–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –µ—Å–ª–∏ GPT –∏—Ö –¥–æ–±–∞–≤–∏—Ç."""
    # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏/–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–±–æ–∑–Ω–∞—á–∞—Ç—å –∂–∏—Ä–Ω—ã–π/–∫—É—Ä—Å–∏–≤
    # –≠—Ç–æ –æ—á–µ–Ω—å –≥—Ä—É–±–∞—è –∑–∞–º–µ–Ω–∞ –∏ –º–æ–∂–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—å –ª–µ–≥–∏—Ç–∏–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ä–∞–∑–º–µ—Ç–∫–æ–π.
    # text = text.replace("**", "").replace("__", "") # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    # text = text.replace("*", "").replace("_", "") # –ï—â–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ
    
    # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ–¥—Ö–æ–¥: –µ—Å–ª–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    # text = re.sub(r"^\*\s+", "- ", text, flags=re.MULTILINE) # –ï—Å–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ re
    
    # –ü–æ–∫–∞ —á—Ç–æ, —É—á–∏—Ç—ã–≤–∞—è —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–æ–º–ø—Ç, –Ω–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É,
    # —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ—Ä—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ç–∏–∫–µ—Ä–∞—Ö).
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
    return text

def gpt_report() -> str:
    try:
        resp = openai.ChatCompletion.create(
            model=MODEL,
            messages=[{"role": "user", "content": PROMPT.format(date=date.today().strftime("%d.%m.%Y"))}],
            timeout=TIMEOUT,
            temperature=0.4,
            max_tokens=GPT_TOKENS, # GPT_TOKENS –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ *–Ω–µ–π—Ä–æ—Å–µ—Ç–∏*
        )
        generated_text = resp.choices[0].message.content.strip()
        # cleaned_text = clean_text_from_potential_markdown(generated_text)
        log(f"GPT generated text length: {len(generated_text)} chars")
        return generated_text # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏, –ø–æ–ª–∞–≥–∞—è—Å—å –Ω–∞ –ø—Ä–æ–º–ø—Ç
    except openai.error.OpenAIError as e:
        log(f"OpenAI API Error: {e}")
        raise
    except Exception as e:
        log(f"Error in gpt_report: {e}")
        raise

def chunk_text(text: str, target_char_len: int = TARGET_CHAR_LEN_FOR_CHUNK):
    # –ó–∞–ø–∞—Å –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "(10/10)\n" ~ 10 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    # textwrap —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ –±–∞–π—Ç.
    wrap_width = target_char_len - 60 # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –æ—Ç —Ü–µ–ª–µ–≤–æ–π –¥–ª–∏–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤
    
    log(f"Original text length for chunking: {len(text)} chars, {len(text.encode('utf-8'))} bytes.")
    log(f"Chunking with wrap_width: {wrap_width} chars.")

    parts = wrap(text, width=wrap_width,
                 break_long_words=False, # –°—Ç–∞—Ä–∞–µ–º—Å—è –Ω–µ —Ä–≤–∞—Ç—å —Å–ª–æ–≤–∞
                 replace_whitespace=False, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –æ—Ç GPT
                 drop_whitespace=True, # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º —á–∞—Å—Ç–µ–π
                 break_on_hyphens=False)
    
    total_parts = len(parts)
    if total_parts == 0 and text.strip(): # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª, –Ω–æ wrap –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª (–æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π)
        parts = [text.strip()]
        total_parts = 1
    elif total_parts == 0: # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª –ø—É—Å—Ç–æ–π
        return [""]

    chunked_messages = []
    for i, p_text in enumerate(parts):
        current_part_text = p_text.strip()
        if not current_part_text: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
            continue

        if total_parts > 1:
            message_with_prefix = f"({i+1}/{total_parts})\n{current_part_text}"
        else:
            message_with_prefix = current_part_text
        chunked_messages.append(message_with_prefix)
        
    return chunked_messages

def send(part_text: str):
    if not part_text:
        log("Attempted to send an empty part. Skipping.")
        return

    char_len = len(part_text)
    byte_len = len(part_text.encode('utf-8'))
    log(f"Sending part: {char_len} chars, {byte_len} bytes. (TG Limit: {TG_LIMIT_BYTES} bytes)")

    if byte_len > TG_LIMIT_BYTES:
        log(f"ERROR: Part is too long in bytes! {byte_len} > {TG_LIMIT_BYTES}. Truncating (this is a bugfix attempt, ideally chunking should prevent this).")
        # –≠—Ç–æ –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –ø–æ –±–∞–π—Ç–∞–º, –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ chunk_text –Ω–µ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å.
        # –û–Ω–∞ –º–æ–∂–µ—Ç –æ–±—Ä–µ–∑–∞—Ç—å –Ω–µ –ø–æ —Å–∏–º–≤–æ–ª—É, –∞ –ø–æ —Å–µ—Ä–µ–¥–∏–Ω–µ –º–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, —á—Ç–æ –ø–ª–æ—Ö–æ.
        part_text = part_text.encode('utf-8')[:TG_LIMIT_BYTES].decode('utf-8', 'ignore')
        log(f"Post-truncation: {len(part_text)} chars, {len(part_text.encode('utf-8'))} bytes.")


    json_payload = {
        "chat_id": CHAT_ID,
        "text": part_text,
        "disable_web_page_preview": True
        # "parse_mode" –ù–ï –£–ö–ê–ó–´–í–ê–ï–ú, —á—Ç–æ–±—ã –±—ã–ª plain text
    }
    try:
        r = requests.post(TG_URL, json=json_payload, timeout=20) # –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        r.raise_for_status()
        log(f"Part sent successfully to {CHAT_ID}.")
    except requests.exceptions.HTTPError as e:
        log(f"TG HTTP Error {r.status_code} for {CHAT_ID}: {r.text}. Error: {e}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 400 "Bad Request: message is too long", —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–ª–∏–Ω–æ–π –æ—Å—Ç–∞–ª–∞—Å—å
        if r.status_code == 400 and "message is too long" in r.text.lower():
            log("CRITICAL: TELEGRAM REPORTS MESSAGE IS TOO LONG DESPITE CHUNKING. Review chunking logic and byte counts.")
    except requests.exceptions.RequestException as e:
        log(f"TG Request Error for {CHAT_ID}: {e}")
    except Exception as e:
        log(f"Generic error in send function for {CHAT_ID}: {e}")

def main():
    log("Script started. Attempting to generate and send report...")
    try:
        report_text = gpt_report()
        if not report_text or report_text.isspace():
            log("GPT returned an empty or whitespace-only report. Exiting.")
            return

        segments = chunk_text(report_text)
        if not segments or not any(s.strip() for s in segments):
            log("Chunking resulted in no valid segments. Exiting.")
            return

        log(f"Report chunked into {len(segments)} segment(s).")

        for i, seg_text in enumerate(segments):
            log(f"Processing segment {i+1}/{len(segments)}...")
            send(seg_text)
            if i < len(segments) - 1:
                sleep(2) # –£–≤–µ–ª–∏—á–∏–ª –ø–∞—É–∑—É
        log("All segments processed. Posted OK.")
    except openai.error.OpenAIError as e:
        log(f"Fatal OpenAI API Error: {e}")
        sys.exit(1)
    except requests.exceptions.RequestException as e:
        log(f"Fatal Telegram API Request Error: {e}")
        sys.exit(1)
    except Exception as e:
        log(f"Fatal error in main execution: {e}")
        import traceback
        log(f"Traceback: {traceback.format_exc()}")
        sys.exit(1)

if __name__ == "__main__":
    main()
