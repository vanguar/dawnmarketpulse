import re
import os
from datetime import date

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ GPT –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
KEY_TERMS = {
    "AI": "üß† –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ò–ò –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.",
    "crash": "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –°—Ç–æ–∏—Ç –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º.",
    "inflation": "üìâ –†–æ—Å—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Å—Ç–∞–≤–∫–∏.",
    "recession": "üìâ –£–≥—Ä–æ–∑—ã —Ä–µ—Ü–µ—Å—Å–∏–∏ –º–æ–≥—É—Ç –æ—Å–ª–∞–±–∏—Ç—å —Ñ–æ–Ω–¥–æ–≤—ã–µ —Ä—ã–Ω–∫–∏.",
    "interest rates": "üí∞ –í–æ–∑–º–æ–∂–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π –∏ —Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫.",
}

def keyword_alert(text):
    findings = []
    for word, reaction in KEY_TERMS.items():
        pattern = re.compile(rf"\b{word}\b", re.IGNORECASE)
        if pattern.search(text):
            findings.append(f"‚Ä¢ {word}: {reaction}")
    if findings:
        return 'üî∫ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:\n' + "\n".join(findings)
" + "\n".join(findings)
    else:
        return "üü¢ –ö–ª—é—á–µ–≤—ã—Ö —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

# –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –∫–µ—à –≤ —Ñ–∞–π–ª
def store_and_compare(report_text, cache_dir="cache"):
    os.makedirs(cache_dir, exist_ok=True)
    today = date.today().isoformat()
    today_file = os.path.join(cache_dir, f"{today}.txt")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ—Ç—á—ë—Ç
    with open(today_file, "w", encoding="utf-8") as f:
        f.write(report_text)

    # –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –≤—á–µ—Ä–∞—à–Ω–∏–º
    from datetime import timedelta
    yesterday = (date.today() - timedelta(days=1)).isoformat()
    yesterday_file = os.path.join(cache_dir, f"{yesterday}.txt")

    if os.path.exists(yesterday_file):
        with open(yesterday_file, "r", encoding="utf-8") as f:
            previous = f.read()
        return f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤—á–µ—Ä–∞—à–Ω–∏–º –æ—Ç—á—ë—Ç–æ–º:
{compare_reports(previous, report_text)}"
    else:
        return "üìä –î–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞ –Ω–µ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."

def compare_reports(old, new):
    old_lines = set(old.splitlines())
    new_lines = set(new.splitlines())
    added = new_lines - old_lines
    removed = old_lines - new_lines
    result = []
    if added:
        result.append("‚ûï –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:")
        result.extend(["  " + line for line in added])
    if removed:
        result.append("‚ûñ –£–¥–∞–ª–µ–Ω–æ:")
        result.extend(["  " + line for line in removed])
    return "\n".join(result) if result else "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç."
